function setLoader($object) {
    $object.text('Loading...')
}

const ajaxURL = '/wp-content/themes/teslasuit-portal/inc/classes/ajax.php'

/**
 * Tabs Toggler
 */

jQuery('.tabs .toggle').on('click', function () {
    $tabs = jQuery(this).parents('.tabs')

    jQuery(this).siblings('.toggle_active').removeClass('toggle_active');
    jQuery(this).addClass('toggle_active');

    jQuery.ajax({
        method: "POST",
        url: ajaxURL,
        dataType: 'html',
        data: {
            action: 'toggle_tab',

            sidebar: $tabs.attr('sidebar'),

            post_type: $tabs.attr('post_type'),
            taxonomy: jQuery(this).parent().attr('taxonomy'),
            term: jQuery(this).attr('term'),

            tax_query: $tabs.attr('tax_query'),
            tax_query_terms: $tabs.attr('tax_query_terms'),

            template: $tabs.attr('template'),
            columns: $tabs.attr('columns'),
            limit: $tabs.attr('limit'),
        },
    })
        .done(function (response) {
            jQuery('.tabs__toggles + div').remove();
            jQuery(response).appendTo($tabs);
            if ("IntersectionObserver" in window) {
                lazyLoadImages();
            }
        })

        .fail(function () {
            console.log('Error with AJAX request occured');
        })
});

/**
 * Software Downloads Form
 */

jQuery(document).on('change', '#software-download select', function () {

    $form = $(this).parents('#software-download');
    $btn = $form.find('a');
    $versionSelect = $form.find('select[name="version"]')

    const platform = $form.find('select[name="platform"]').val();
    const productName = $form.find('input[name="productName"]').val();
    const fileName = $versionSelect.val();

    if ($(this).attr('name') != 'version') {
        jQuery.ajax({
            method: "POST",
            url: ajaxURL,
            dataType: 'json',
            data: {
                action: 'get_downloads_versions',
                platform: platform,
                productName: productName
            },
            beforeSend: function () {
                $btn.addClass('btn_disabled');
                $versionSelect.html('<option disabled selected value>Please, choose version</option>');
                setLoader($btn);
            },
        })
            .done(function (response) {
                if (response == false) {
                    $versionSelect.prop('disabled', true);
                    $btn.addClass('btn_disabled');
                    $btn.text('File not found!');
                } else {
                    $btn.text('Choose Version');
                    $versionSelect.prop('disabled', null);
                    for (const key in response) {
                        if (Object.hasOwnProperty.call(response, key)) {
                            const element = response[key];
                            $('<option value="' + key + '">' + element + '</option>').appendTo($versionSelect);
                        }
                    }
                }
            })

            .fail(function () {
                console.log('Error with AJAX request occured');
            })
    } else {
        $(document).find('#meta-filename').html(fileName);

        $notes = $(document).find('input[name="notes-' + fileName + '"]').val();
        $(document).find('#meta-notes').html($notes);
        $btn.attr('href', '?download=true&filename=' + fileName);
    }



});

/**
 * Use Cases Gallery Toggler
 */

jQuery(document).on('click', '.use-cases-gallery .toggle', function () {
    $toggles = $(this).parents('.use-cases-gallery__toggles')

    $(this).siblings('.toggle_active').removeClass('toggle_active');
    $(this).addClass('toggle_active');

    $.ajax({
        method: "POST",
        url: ajaxURL,
        dataType: 'html',
        data: {
            action: 'toggle_use_case_gallery',
            term: $(this).attr('term'),
        },
    })
        .done(function (response) {
            $toggles.next().remove();
            $toggles.after(response)
        })

        .fail(function () {
            console.log('Error with AJAX request occured');
        })
});

/**
 * Deleting My Product
 */

jQuery(document).on('click', '[action="delete_my_product"]', function () {

    $btn = $(this);
    $msn = $btn.attr('msn');

    jQuery.ajax({
        method: "POST",
        url: ajaxURL,
        dataType: 'json',
        data: {
            action: 'delete_my_product',
            msn: $msn,
        },
        beforeSend: function () {
            $btn.text('Removing...')
        },
    })
        .done(function (response) {
            if (response == false) {
                $btn.html('Something went wrong!');
            } else {
                window.location.replace('https://' + window.location.hostname + "/profile/my-products/");
            }
        })

        .fail(function () {
            console.log('Error with AJAX request occured');
            $btn.html('Something went wrong!');
        })

});

/**
 * Adding My Product
 */

jQuery(document).on('click', 'button[action="add_my_product"]', function () {

    $btn = $(this);
    $status = $btn.parents('.product-info__card').find('#status-text');

    $psn = $btn.attr('psn');
    $pn = $btn.attr('pn');
    $type = $btn.attr('type');

    jQuery.ajax({
        method: "POST",
        url: ajaxURL,
        dataType: 'json',
        data: {
            action: 'add_my_product',
            psn: $psn,
            pn: $pn,
            type: $type,
        },
        beforeSend: function () {
            $btn.html('Adding...')
        },
    })
        .done(function (response) {
            if (response == true) {
                $btn.replaceWith('<a href="/profile/my-products/" class="btn btn_lg btn_primary">Success! Go to My Products</a>');
                $status.html('Product added').addClass('color_success').removeClass('color_font');
            } else {
                $btn.html('Something went wrong!');
            }
        })

        .fail(function () {
            console.log('Error with AJAX request occured');
            $btn.html('Something went wrong!');
        })

});

/**
 * Support Form (Support Page)
 */
jQuery(document).on('submit', '#add-device, #add-device-legacy', function (event) {


    $btn = $('button[type="submit"][form="' + $(this).attr('id') + '"]');

    event.preventDefault();

    $psn = $(this).find('input[name="psn"]').val();
    $pn = $(this).find('input[name="pn"]').val();
    $legacy = $(this).find('input[name="legacy"]').val();


    const data = {
        action: 'add_my_product',
    }

    if ($legacy) {
        data.legacy = $legacy;
    } else if ($psn && $pn) {
        data.psn = $psn;
        data.pn = $pn;
    }

    jQuery.ajax({
        method: "POST",
        url: ajaxURL,
        dataType: 'json',
        data: data,
        beforeSend: function () {
            $btn.text('Adding...').css('pointer-events', 'none');
        },
    })
        .done(function (response) {
            if (response == true) {
                $btn.replaceWith('<a href="/profile/my-products/" class="btn btn_lg btn_primary overlay-form__btn">Product added!</a>');
                window.location.reload();
            } else {
                $btn.html('Something went wrong!');
            }

        })

        .fail(function (response) {
            $btn.html('Something went wrong!');
        })
});

jQuery(document).on('keyup', 'form#add-device input, form#add-device-legacy input', function () {

    $form = $(this).parents('form');
    $button = $form.siblings('button[type="submit"]')
    $button.attr('form', $form.attr('id'));
    $button.text('Apply number').css('pointer-events', 'all');
});

/**
 * Generating Doxygen Version Select
 */

jQuery(document).ready(() => {

    if ($('.documentation-doxygen #nav-tree').length) {

        $sidebar = $('.documentation-doxygen #nav-tree');
        $title = $('.single-doc .page-heading .title');
        $breadcrumb = $('#doxygen-root-breadcrumb');
        $downloadButton = $('#doxygen-downloads-link');

        const urlSegments = window.location.pathname.split("/").filter(entry => entry !== "");
        var key = urlSegments.slice(-1);
        var page = urlSegments.slice(-1)[0];
        if (key[0].includes('.html')) {
            key = urlSegments.slice(-2, -1);
        } else {
            page = 'index.html';
        }

        console.log(key);
        console.log(page);

        const versions = key[0].split("-")

        jQuery.ajax({
            method: "POST",
            url: ajaxURL,
            dataType: 'json',
            data: {
                action: 'generate_doxygen_versions',
                key: versions[0]
            },
        })
            .done(function (response) {
                $sidebar.prepend(response.select);

                const urlSegments = window.location.pathname.split("/").filter(entry => entry !== "");
                $('select[name="doxygen-version"] option[value="' + urlSegments[2] + '"]').prop('selected', true);
                $('select[name="doxygen-version"]').select2({
                    minimumResultsForSearch: -1,
                });

                $breadcrumb.text(response.name).attr('href', `/documentation/d/${urlSegments[2]}/`);
                $downloadButton.attr('href', `/downloads/${urlSegments[2]}/`);

                // $meta = '<div class="gutenberg-page__meta"><a class="backlink" href="/documentation/">All Documentation</a><a class="link" href="/downloads/' + urlSegments[2] + '/">Download</a></div>'

                // $('#doc-content').prepend($meta)

                initNavTree(page, '');

                $('.body-loader').remove();
            })

            .fail(function () {
                console.log('Error with AJAX request occured');
            })
    }
});

/**
 * Changing User Consent
 */

jQuery(document).on('click', 'button[action="change_consent_status"]', function () {

    $btn = $(this);
    $consent = $btn.attr('consent');
    $name = $btn.attr('consent-name');

    jQuery.ajax({
        method: "POST",
        url: ajaxURL,
        dataType: 'json',
        data: {
            action: 'change_consent_status',
            consent: $consent,
            name: $name,
        },
        beforeSend: function () {
            $btn.html('Updating status...').css('pointer-events', 'none');
        },
    })
        .done(function (response) {
            if (response.success == true) {
                if ($consent == 'false') {
                    $btn.html('I agree to share my data').addClass('btn_primary').removeClass('btn_danger').css('pointer-events', 'all').attr('consent', 'true');
                    $('#consent-text').html('Now you don’t share your data with us').addClass('color_danger').removeClass('color_success');

                } else {
                    $btn.html('Decline agreement').addClass('btn_danger').removeClass('btn_primary').css('pointer-events', 'all').attr('consent', 'false');
                    $('#consent-text').html('Now you share your data with us').addClass('color_success').removeClass('color_danger');
                }
            } else {
                $btn.html('Something went wrong!');
            }
        })

        .fail(function () {
            console.log('Error with AJAX request occured');
            $btn.html('Something went wrong!');
        })

});
function vsaAnimate() {

    function topper() {
        const windowHeight = window.innerHeight / 2;
        const elementHeight = document.querySelector('.vsa .title-wrapper').getBoundingClientRect().height;
        const elementTop = document.querySelector('.vsa .title-wrapper').getBoundingClientRect().top;
        return windowHeight - elementHeight / 2 - (elementTop + window.scrollY);
    }

    let pos = topper();

    let tl = anime.timeline({
        easing: 'linear',
        duration: 100
    });

    tl.add({
        targets: ['.vsa'],
        paddingTop: pos,
        easing: 'linear',
        duration: 0
    }, 0)

    tl.add({
        targets: ['.vsa .title'],
        easing: 'linear',
        opacity: 1,
        duration: 100
    }, 0)

    tl.add({
        targets: ['.vsa .scroll-action'],
        easing: 'linear',
        top: () => {
            return window.innerHeight - 80 + 'px';
        },
        left: () => {
            const logo = document.querySelector('.header__logo')
            return logo.getBoundingClientRect().left + 'px';
        },
        opacity: 1,
        duration: 100,

    }, 0)

    tl.add({
        targets: ['.vsa .subtitle'],
        easing: 'linear',
        opacity: 1,
        duration: 100
    }, 0)

    tl.add({
        targets: ['.vsa .vsa__scrollable'],
        easing: 'linear',
        opacity: 1,
        duration: 100
    }, 0)

    if (document.querySelector('.vsa').classList.contains('vsa_suit-4')) {
        tl.add({
            targets: ['.vsa.vsa_suit-4 .image'],
            translateY: document.querySelector('.vsa .subtitle').getBoundingClientRect().height / -1,
            top: (elem) => {
                const windowHeight = window.innerHeight / 2;
                const elementHeight = elem.getBoundingClientRect().height;
                return (windowHeight - elementHeight / 2) + document.querySelector('.vsa .subtitle').getBoundingClientRect().height + 'px'
            },
            easing: 'linear',
            duration: 0
        })
    }

    if (document.querySelector('.vsa').classList.contains('vsa_glove')) {
        tl.add({
            targets: ['.vsa.vsa_glove .image'],
            translateY: document.querySelector('.vsa .title').getBoundingClientRect().height / -1,
            top: (elem) => {
                const windowHeight = window.innerHeight / 2;
                const elementHeight = elem.getBoundingClientRect().height;
                return (windowHeight - elementHeight / 2) + document.querySelector('.vsa .title').getBoundingClientRect().height + 'px'
            },
            easing: 'linear',
            duration: 0
        })
    }

    if (document.querySelector('.vsa').classList.contains('vsa_suit-4')) {
        tl.add({
            targets: ['.vsa .vsa__scrollable .item'],
            translateY: document.querySelector('.vsa .image').getBoundingClientRect().height / -2,
            easing: 'linear',
            duration: 0
        })
    }

    if (document.querySelector('.vsa').classList.contains('vsa_glove')) {
        tl.add({
            targets: ['.vsa .vsa__scrollable .item'],
            translateY: document.querySelector('.vsa .image').getBoundingClientRect().height / -2 + 100,
            easing: 'linear',
            duration: 0
        })
    }

}

function vsaReveal() {
    const windowHeight = window.innerHeight;
    const windowCenter = windowHeight / 2;
    const items = document.querySelectorAll(".vsa__scrollable > .item");

    for (let i = 0; i < items.length; i++) {
        let elementTop = items[i].getBoundingClientRect().top;
        let elementHeight = items[i].getBoundingClientRect().height;

        if (elementTop > windowCenter - elementHeight && elementTop < windowCenter + elementHeight) {
            anime({
                targets: items[i],
                opacity: 1,
                duration: 300,
                easing: 'linear'
            })
        } else if (elementTop > windowHeight - windowHeight * 0.66 || elementTop > windowHeight - windowHeight * 0.33) {
            anime({
                targets: items[i],
                opacity: 0.8,
                duration: 300,
                easing: 'linear'
            })
        } else {
            anime({
                targets: items[i],
                opacity: 0.6,
                duration: 300,
                easing: 'linear'
            })
        }
    }
}

function vsaNarrow() {

    const vsa = document.querySelector(".vsa");
    const vsaInner = document.querySelector(".vsa > .container");
    const elementBottom = vsa.getBoundingClientRect().bottom;
    const windowHeight = window.innerHeight;

    if (elementBottom - windowHeight < -10) {
        vsa.classList.add('rounded');
    }


    if (elementBottom - windowHeight >= 0) {
        vsa.classList.remove('rounded');
    }

    if (elementBottom - windowHeight < -50) {

        vsa.classList.add('vsa--narrow');


        const scrollAction = document.querySelector('.scroll-action');
        if (scrollAction) {
            anime({
                targets: scrollAction,
                opacity: 0,
                duration: 100,
                easing: 'linear',
                complete: function (anim) {
                    scrollAction.remove();
                }
            })
        }




    }

    if (elementBottom - windowHeight >= -40) {

        vsa.classList.remove('vsa--narrow');

    }

}

if (document.querySelector('.vsa')) {
    vsaAnimate();
    window.addEventListener("scroll", vsaReveal);
    window.addEventListener("scroll", vsaNarrow);

    jQuery(document).on('click', '.scroll-action', function () {
        $([document.documentElement, document.body]).animate({
            scrollTop: $("#scroll-action-anchor").offset().top - 80
        }, 5000);
    })
}

function cubesObserver() {

    var section = document.querySelector('.cubes-animation');
    var content = section.querySelector('.cubes-animation__content')
    var items = [].slice.call(content.querySelectorAll(".cubes-animation__item"));
    var img = section.querySelector('.cubes-animation__image img');

    let observer = new IntersectionObserver((entries, observer) => {
        entries.forEach((entry) => {
            if (entry.isIntersecting) {
                let item = entry.target;

                if (!!section.querySelector('.active')) {
                    section.querySelector('.active').classList.remove('active');
                }

                item.classList.add('active');
                img.src = item.querySelector('img').src;
            }
        });
    }, { rootMargin: "-50% 0px -50% 0px" });

    items.forEach((item) => {
        observer.observe(item);
    });
}

function softwareInfluxObserver() {

    var section = document.querySelector('.software-influx');
    var softwareCards = [].slice.call(section.querySelectorAll(".software-influx__item"));
    var softwareImg = section.querySelector('.software-influx__img img')

    var format = '.webp';
    if (!webpIsSupported) {
        format = '.png';
    }

    let observer = new IntersectionObserver((entries, observer) => {
        entries.forEach(function (entry) {
            if (entry.isIntersecting) {
                let item = entry.target;
                section.querySelector('.active').classList.remove('active');
                item.classList.add('active');
                softwareImg.src = item.dataset.img + format;
            }
        });
    }, { rootMargin: "-50% 0px -50% 0px" });

    softwareCards.forEach((item) => {
        observer.observe(item);
    });
}

function tilesObserver() {

    var tileTitles = document.querySelectorAll('.title--tiles-reveal');

    let observer = new IntersectionObserver((entries, observer) => {
        entries.forEach(function (entry) {
            {
                if (entry.isIntersecting) {
                    let tagret = entry.target;
                    tilesReveal(tagret);
                    observer.unobserve(tagret);
                }
            }
        })
    }, { rootMargin: "-100px 0px -100px 0px" });

    tileTitles.forEach(element => {
        observer.observe(element);
    });

}

function tilesReveal(tagret) {
    anime({
        targets: tagret.querySelectorAll('span > span'),
        translateY: [200, 0],
        duration: 700,
        easing: 'easeOutSine',
        delay: anime.stagger(50)
    })
}

function buttonAnimateRotation() {
    const buttons = document.querySelectorAll('.btn--animation-rotation');
    buttons.forEach(element => {
        const text = element.textContent;
        element.innerHTML = '<span><span>' + text + '</span></span>';

        element.addEventListener('mouseenter', () => {
            const span = element.querySelector('span > span')

            let timeline = anime.timeline({
                easing: 'easeOutSine',
                duration: 200
            });

            timeline.add({
                targets: span,
                translateY: [0, -50],

            }, 0)

            let options = {
                targets: span,
                translateY: [50, 0],
            }

            if (element.classList.contains('btn--animation-rotation-price')){
                options.begin = function (anim) {
                    element.querySelector('span > span').innerHTML = 'Order';
                }
            }

            timeline.add(options, 100)

        })

        element.addEventListener('mouseleave', () => {
            const span = element.querySelector('span > span')

            let timeline = anime.timeline({
                easing: 'easeOutSine',
                duration: 200
            });

            timeline.add({
                targets: span,
                translateY: [0, 50],
            }, 0)

            let options = {
                targets: span,
                translateY: [-50, 0],
            }

            if (element.classList.contains('btn--animation-rotation-price')){
                options.begin = function (anim) {
                    element.querySelector('span > span').innerHTML = text;
                }
            }

            timeline.add(options, 100);

        })
    });
}

function logoSlidersObserver() {
    const sliders = document.querySelectorAll('.logo-slider__inner');
    const images = document.querySelectorAll('.logo-slider__inner img');

    let observer = new IntersectionObserver((entries, observer) => {
        entries.forEach(function (entry) {
            {
                if (entry.isIntersecting) {
                    let tagret = entry.target;

                    var format = '.webp';
                    if (!webpIsSupported) {
                        format = '.png';
                    }

                    images.forEach(element => {
                        element.src = element.dataset.src + format;
                    });

                    let imagesLoaded = false;
                    const poll = setInterval(() => {

                        for (let img of images) {

                            if (img.complete && img.naturalHeight !== 0) {
                                imagesLoaded = true;
                            } else {
                                imagesLoaded = false;
                                break;
                            }
                        }

                        if (imagesLoaded) {
                            logoSliderAnimation(tagret);
                            clearInterval(poll);
                            observer.unobserve(tagret);
                        }
                    }, 100);

                }
            }
        })
    }, { rootMargin: "200% 0px 200% 0px" });

    sliders.forEach(element => {
        observer.observe(element);
    });

}

function logoSliderAnimation(slider) {

    const wrapper = slider.querySelector('.logo-slider__items-wrapper')
    const secondWrapper = wrapper.cloneNode(true);

    const dir = slider.dataset.dir != undefined ? slider.dataset.dir : 'left';
    const duration = slider.dataset.duration != undefined ? parseInt(slider.dataset.duration) : 80000;

    const animeOptions = {
        targets: slider,
        easing: 'linear',
        duration: duration,
        loop: true,
    }

    if (dir == 'left') {
        slider.appendChild(secondWrapper);
        animeOptions.left = wrapper.scrollWidth * -1;
    } else if (dir == 'right') {
        slider.insertBefore(secondWrapper, wrapper);
        animeOptions.right = wrapper.scrollWidth * -1;
    }

    anime(animeOptions);

}

/**
 * DOMContentLoaded
 */

document.addEventListener("DOMContentLoaded", function () {
    if ("IntersectionObserver" in window) {

        if (!!document.querySelector('.software-influx')) {
            softwareInfluxObserver();
        }

        if (!!document.querySelector('.title--tiles-reveal')) {
            const tileTitles = document.querySelectorAll('.title--tiles-reveal');

            tileTitles.forEach(element => {
                element.innerHTML = element.innerText.split(" ").map((char) => {
                    return "<span><span>" + char + "</span></span>";
                }).join(" ");
            });

            tilesObserver();
        }

    }
});

window.addEventListener("load", () => {
    buttonAnimateRotation();

    if ("IntersectionObserver" in window) {
        if (!!document.querySelector('.logo-slider')) {
            logoSlidersObserver();
        }

        if (!!document.querySelector('.cubes-animation')) {

            const image = document.querySelector('.cubes-animation__image');
            const imageHeight = image.getBoundingClientRect().height;

            image.style.top = (window.innerHeight - imageHeight) / 2 + 'px';

            cubesObserver();

        }
    }
})



function checkCaptcha() {
    return new Promise((resolve, reject) => {
        grecaptcha.ready(function () {

            grecaptcha.execute('6LdHrKggAAAAAKKSKtoN9OBIlVCG1uEmgxrhJNKq', { action: 'submit' })
                .then(function (token) {
                    jQuery.ajax({
                        method: "POST",
                        url: ajaxURL,
                        data: {
                            action: 'check_captcha',
                            captchaToken: token
                        },
                        dataType: 'json',
                    })

                        .always(function (response) {
                            response ? resolve(response) : reject(response);
                        })
                });
        });
    })
}

/**
 * Contact Us Form (Contact Us Page)
 */
jQuery(document).on('submit', '#contact-us-form', function (event) {

    event.preventDefault();

    $btn = $('button[type="submit"][form="contact-us-form"]');
    const formData = new FormData(document.getElementById("contact-us-form"));
    const formId = 40914;

    event.preventDefault();

    jQuery.ajax({
        method: "POST",
        url: `/api/contact-form-7/v1/contact-forms/${formId}/feedback`,
        data: formData,
        dataType: 'json',
        processData: false,
        contentType: false,
        beforeSend: function () {
            $btn.text('Sending...').css('pointer-events', 'none');
        },
    })
        .done(function (response) {
            $btn.text('Success!').css('pointer-events', 'none');
            $('#contact-us-form').html('<p class="a2 mt-24">Thanks for your request!</p><p class="p2 mt-16">Our team will contact you soon. <br>You are welcome to read <a href="/blog/" class="link">Teslasuit Blog</a> or visit our <a href="https://developer.teslasuit.io" target="_blank" class="link">Developer Portal</a></p>');
        })

        .fail(function (response) {
            console.log(response);
        })
});

/**
 * Career Form (Vacancies Archive)
 */

jQuery(document).on('submit', '#vacancy-form', function (event) {

    $btn = $('button[type="submit"][form="vacancy-form"]');

    event.preventDefault();

    jQuery.ajax({
        method: "POST",
        url: ajaxURL,
        dataType: 'json',
        data: {
            action: 'submit_form',
            form: 'vacancy-form',
            name: $(this).find('input[name="name"]').val(),
            phone: $(this).find('input[name="phone"]').val(),
            email: $(this).find('input[name="email"]').val(),
            vacancy: $(this).find('input[name="vacancy"]').val(),
            message: $(this).find('textarea[name="message"]').val(),

        },
        beforeSend: function () {
            $btn.text('Sending...').css('pointer-events', 'none');
        },
    })
        .done(function (response) {
            $btn.text('Success!').css('pointer-events', 'none');
        })

        .fail(function (response) {
            console.log(response);
        })
});

/**
 * Career Form (Overlay - Vacancies Archive)
 */
jQuery(document).on('submit', '#vacancy-form-overlay', function (event) {

    $btn = $('button[type="submit"][form="vacancy-form-overlay"]');

    event.preventDefault();

    jQuery.ajax({
        method: "POST",
        url: ajaxURL,
        dataType: 'json',
        data: {
            action: 'submit_form',
            form: 'vacancy-form-overlay',
            name: $(this).find('input[name="name"]').val(),
            phone: $(this).find('input[name="phone"]').val(),
            email: $(this).find('input[name="email"]').val(),
            message: $(this).find('textarea[name="message"]').val(),
            vacancy: $(this).find('input[name="vacancy"]').val(),
        },
        beforeSend: function () {
            $btn.text('Sending...').css('pointer-events', 'none');
        },
    })
        .done(function (response) {
            $btn.text('Success!').css('pointer-events', 'none');
        })

        .fail(function (response) {
            console.log(response);
        })
});

/**
 * Order Form (Overlay - All Site)
 */
jQuery(document).on('submit', '#request-form-overlay', function (event) {

    event.preventDefault();

    $form = $(this);
    $modalContent = $form.parent();

    const formData = new FormData(document.getElementById("request-form-overlay"));
    const formId = 40912;

    checkCaptcha()
        .then(function (data) {
            jQuery.ajax({
                method: "POST",
                url: `/api/contact-form-7/v1/contact-forms/${formId}/feedback`,
                data: formData,
                dataType: 'json',
                processData: false,
                contentType: false,
                beforeSend: function () {
                    $modalContent.find('.form__message').remove();
                    $modalContent.find('.form__submitbar').before('<p class="form__message form__message--success">Thanks for your order!<br>Our team will contact you soon.</p>');
                    $form.trigger('reset');
                    $form.find('select').val(null).trigger('change');
                    localStorage.removeItem('overlayFormValues');
                },
            })
        })
        .catch(function (data) {
            $modalContent.find('.form__submitbar').before('<p class="form__message form__message--danger">Please, reload page and try again</p>');
        })


});

/**
 * Demo Form (Overlay - All Site)
 */

jQuery(document).on('submit', '#demo-form-overlay', function (event) {

    event.preventDefault();

    $form = $(this);
    $modalContent = $form.parent();

    const formData = new FormData(document.getElementById("demo-form-overlay"));
    const formId = 40913;

    if (!formData.has('profile') || !formData.get('profile')) {
        formData.append('profile', 'Other');
    }

    if (!formData.has('job') || !formData.get('job')) {
        formData.set('job', 'Other');
    }

    checkCaptcha()
        .then(function (data) {
            jQuery.ajax({
                method: "POST",
                url: `/api/contact-form-7/v1/contact-forms/${formId}/feedback`,
                data: formData,
                dataType: 'json',
                processData: false,
                contentType: false,
                beforeSend: function () {
                    modalHeading('Request a Demo', `<span>Your request has been successfully submitted. Please check your inbox for the confirmation email. Follow the link in the email to book a demo with one of our sales team.</span><span class="mt-12">If you did not receive it please check your spam folder.</span>`)
                    $modalContent.empty();
                    $modalContent.append('<p class="p2 color_black w-700 mt-24">Details provided</p>');
                    $modalContent.append(`<p class="p3 mt-12">${formData.get('company')}, ${formData.get('profile')}</p>`);
                    $modalContent.append(`<p class="p3 mt-12">${formData.get('firstName')} ${formData.get('lastName')}</p>`);
                    $modalContent.append(`<p class="p3 mt-12">${formData.get('job')}</p>`);
                    $modalContent.append(`<p class="p3 mt-12">${formData.get('email')}</p>`);
                    $modalContent.append(`<div class="pb-32-sm mt-auto w-100"><button trigger="close" class="btn btn_md btn_rounded btn_secondary overlay-form__btn">Close</button></div>`);
                },
            })
        })
        .catch(function (data) {
            $modalContent.find('.form__submitbar').before('<p class="form__message form__message--danger">Please, reload page and try again</p>');
        })

});

/**
 * Academics Form (Overlay - All Site)
 */
jQuery(document).on('submit', '#academics-form-overlay', function (event) {

    event.preventDefault();

    $form = $(this);
    $modalContent = $form.parent();

    const formData = new FormData(document.getElementById("academics-form-overlay"));
    const formId = 41321;

    if (!formData.has('job') || !formData.get('job')) {
        formData.set('job', 'Other');
    }

    checkCaptcha()
        .then(function (data) {
            jQuery.ajax({
                method: "POST",
                url: `/api/contact-form-7/v1/contact-forms/${formId}/feedback`,
                data: formData,
                dataType: 'json',
                processData: false,
                contentType: false,
                beforeSend: function () {
                    modalHeading('Academic Program', `<span>Thank you for applying to the Academic Program!</span><span class="mt-12">Please check your inbox for the confirmation email. Follow the link in the email to schedule a call with one of our sales team.</span><span class="mt-12">If you did not receive it please check your spam folder.</span>`)
                    $modalContent.empty();
                    $modalContent.append('<p class="p2 color_black w-700 mt-24">Details provided</p>');
                    $modalContent.append(`<p class="p3 mt-12">${formData.get('company')}</p>`);
                    $modalContent.append(`<p class="p3 mt-12">${formData.get('firstName')} ${formData.get('lastName')}</p>`);
                    $modalContent.append(`<p class="p3 mt-12">${formData.get('job')}</p>`);
                    $modalContent.append(`<p class="p3 mt-12">${formData.get('email')}</p>`);
                    $modalContent.append(`<div class="pb-32-sm mt-auto w-100"><button trigger="close" class="btn btn_md btn_rounded btn_secondary overlay-form__btn">Close</button></div>`);
                },
            })
        })
        .catch(function (data) {
            $modalContent.find('.form__submitbar').before('<p class="form__message form__message--danger">Please, reload page and try again</p>');
        })

});

/**
 * Support Form (Support Page)
 */
jQuery(document).on('submit', '#support-form', function (event) {


    $btn = $('button[type="submit"][form="support-form"]');

    event.preventDefault();

    jQuery.ajax({
        method: "POST",
        url: ajaxURL,
        dataType: 'json',
        data: {
            action: 'submit_form',
            form: 'support-form',
            subject: $(this).find('select[name="subject"]').val(),
            firstName: $(this).find('input[name="firstName"]').val(),
            lastName: $(this).find('input[name="lastName"]').val(),
            company: $(this).find('input[name="company"]').val(),
            email: $(this).find('input[name="email"]').val(),
            message: $(this).find('textarea[name="message"]').val(),
        },
        beforeSend: function () {
            $btn.text('Sending...').css('pointer-events', 'none');
        },
    })
        .done(function (response) {
            $btn.text('Success!').css('pointer-events', 'none');
            $('.supportpage__form > div').html('<p class="a2 mt-24">Thanks for your request!</p><p class="p2 mt-16">Our team will contact you soon. <br>You are welcome to read <a href="/blog/" class="link">Teslasuit Blog</a> or visit our <a href="https://developer.teslasuit.io" target="_blank" class="link">Developer Portal</a></p>');
        })

        .fail(function (response) {
            console.log(response);
        })
});

/**
 * Request Demo (Banner)
 */

jQuery(document).on('submit', '#demo-form', function (event) {

    event.preventDefault();

    $form = $(this);

    const formData = new FormData(document.getElementById("demo-form"));
    const formId = 40913;

    if (!formData.has('profile') || !formData.get('profile')) {
        formData.append('profile', 'Other');
    }

    if (!formData.has('job') || !formData.get('job')) {
        formData.set('job', 'Other');
    }

    checkCaptcha()
        .then(function (data) {
            jQuery.ajax({
                method: "POST",
                url: `/api/contact-form-7/v1/contact-forms/${formId}/feedback`,
                data: formData,
                dataType: 'json',
                processData: false,
                contentType: false,
                beforeSend: function () {
                    $form.find('.form__message').remove();
                    $form.find('.form__submitbar').before('<p class="form__message form__message--success">Thanks for your request!<br>Our team will contact you soon.</p>');
                    $form.trigger('reset');
                    $form.find('select').val(null).trigger('change');
                },
            })
        })
        .catch(function (data) {
            $form.find('.form__submitbar').before('<p class="form__message form__message--danger">Please, reload page and try again</p>');
        })


});

/**
 * Academics Program
 */
jQuery(document).on('submit', '#academics-form', function (event) {

    event.preventDefault();

    $form = $(this);

    const formData = new FormData(document.getElementById("academics-form"));
    const formId = 41321;

    if (!formData.has('job') || !formData.get('job')) {
        formData.set('job', 'Other');
    }

    checkCaptcha()
        .then(function (data) {
            jQuery.ajax({
                method: "POST",
                url: `/api/contact-form-7/v1/contact-forms/${formId}/feedback`,
                data: formData,
                dataType: 'json',
                processData: false,
                contentType: false,
                beforeSend: function () {
                    $form.find('.form__message').remove();
                    $form.find('.form__submitbar').before('<p class="form__message form__message--success">Thanks for your request!<br>Our team will contact you soon.</p>');
                    $form.trigger('reset');
                    $form.find('select').val(null).trigger('change');
                },
            })
        })
        .catch(function (data) {
            $form.find('.form__submitbar').before('<p class="form__message form__message--danger">Please, reload page and try again</p>');
        })


    j
});

/**
 * Newsletter Form (Homepage)
 */

jQuery(document).on('submit', '#newsletter-form', function (event) {
    $form = $(this);
    $btn = $form.find('.sender');

    const formData = new FormData(document.getElementById("newsletter-form"));
    const formId = 41603;

    event.preventDefault();

    jQuery.ajax({
        method: "POST",
        url: `/api/contact-form-7/v1/contact-forms/${formId}/feedback`,
        data: formData,
        dataType: 'json',
        processData: false,
        contentType: false,
        beforeSend: function () {
            $btn.remove();
            $form.trigger('reset');
            $form.find('input[name="email"]').attr('placeholder', 'Subscribing you to newsletter...').prop('disabled', true).css('pointer-events', 'none');
        },
    })
        .done(function (response) {
            $form.find('input[name="email"]').attr('placeholder', 'Thank you for subscribing!');
        })

        .fail(function (response) {
            $form.find('input[name="email"]').attr('placeholder', 'Something went wrong!');
            console.log(response);
        })
});

/**
 * Custom Order Form (Overlay - Shop)
 */
jQuery(document).on('submit', '#custom-order-form-overlay', function (event) {

    event.preventDefault();

    $form = $(this);
    const form = $form[0];

    $modalContent = $form.parent();

    const formData = new FormData(form);

    // Local
    // const formId = 38682;

    // Test
    // const formId = 38877;

    // Prod
    const formId = 41907;

    checkCaptcha()
        .then(function (data) {
            jQuery.ajax({
                method: "POST",
                url: `/api/contact-form-7/v1/contact-forms/${formId}/feedback`,
                data: formData,
                dataType: 'json',
                processData: false,
                contentType: false,
                beforeSend: function () {
                    modalHeading('Custom order submitted', `<p class="color_black mb-8">Thanks for your order, ${formData.get('firstName')}!</p><p class="color_black">Our team will contact you shortly for more details.</p>`)
                    $modalContent.empty();
                    $modalContent.append('<p class="p2 color_black w-700 mb-8 mt-24">Your information</p>');
                    $modalContent.append(`<p class="p3 mb-8">${formData.get('firstName')} ${formData.get('lastName')}</p>`);
                    $modalContent.append(`<p class="p3 mb-8">${formData.get('email')}</p>`);
                    $modalContent.append(`<p class="p3 mb-8">${formData.get('company')}, ${formData.get('profile')} profile</p>`);
                    $modalContent.append(`<p class="p3">${formData.get('message')}`);
                    $modalContent.append(`<div class="pb-32-sm mt-auto w-100"><button trigger="close" class="btn btn_md btn_rounded btn_secondary overlay-form__btn">Close</button></div>`);
                },
            })
        })
        .catch(function (data) {
            $form.after('<p class="form__message form__message--danger">Please, reload page and try again</p>');
        })
});
jQuery(document).ready(function () {
	$height = jQuery('header').height();
	window.headerHeight = $height;
	$didScroll = false;
	$lastScrollTop = 0;

	$navbarHeight = $('.header__top').outerHeight();
	$delta = 64;

	$(window).scroll(function (event) {
		$didScroll = true;
	});

	setInterval(function () {
		if ($didScroll) {
			hasScrolled();
			$didScroll = false;
		}
	}, 100);

	function hasScrolled() {
		$st = $(this).scrollTop();
		if (Math.abs($lastScrollTop - $st) <= $delta)
			return;

		if ($st > $lastScrollTop && $st > $navbarHeight) {

			$('.header__top').addClass('header__top_fixed').removeClass('header__top_down').addClass('header__top_up');
			$('header').css('padding-top', $navbarHeight);
		} else if ($st < $navbarHeight) {
			$('header').css('padding-top', 0);
			$('.header__top').removeClass('header__top_fixed').removeClass('header__top_down').removeClass('header__top_up');

		} else {
			if ($st + $(window).height() < $(document).height()) {
				$('.header__top').removeClass('header__top_up').addClass('header__top_down')
			}
		}

		$lastScrollTop = $st;
	}
});

jQuery(document).on('click', '.header__mobile', function () {
	if ($(this).hasClass('burger')) {

		$('body').addClass('overflow-hidden modal-open--navigation');
		$('.overlay-panel').addClass('overlay-panel_active');
		$(this).removeClass('burger').addClass('cross');

	} else if ($(this).hasClass('cross')) {

		$('body').removeClass('overflow-hidden modal-open--navigation');
		$('.overlay-panel__back').remove();
		$('.overlay-panel').removeClass('overlay-panel_active');

		$('.overlay-panel .sub-menu').removeClass('sub-menu_active');
		$('.overlay-panel > .menu > ul > li').removeClass('menu-item_hidden');
		$(this).removeClass('cross').addClass('burger');

	}
})

jQuery(document).ready(function () {
	$('.overlay-panel .menu-item-has-children > a').attr('href', '#');

	$('.overlay-panel .menu-item-has-children > a').on('click', function () {
		$(this).siblings('.sub-menu').addClass('sub-menu_active');
		$('.overlay-panel > .menu > ul > li').addClass('menu-item_hidden');

		$back = '<span class="overlay-panel__back">' + $(this).text() + '</span>';
		$('.header__logo').append($back);
	})
})

jQuery(document).on('click', '.overlay-panel__back', function () {
	$(this).remove();
	$('.overlay-panel .sub-menu_active').removeClass('sub-menu_active');
	$('.overlay-panel > .menu > ul > li').removeClass('menu-item_hidden');
})
jQuery('.searchbar').on('keyup keydown', '#searchbar', function () {
    if ($(this).val() == '') {
        $(this).parents('.searchbar').removeClass('searchbar_focused');
    } else {
        $(this).parents('.searchbar').addClass('searchbar_focused');
    }
})

jQuery('#searchbar ~ .svg').on('click', function () {

    $(this).siblings('#searchbar').val('');
    $(this).parents('.searchbar').removeClass('searchbar_focused');
})

jQuery(document).on('click', '.searchbar__button', function () {
    const form = $(this).parents('form');
    const search = form.find('input');
    search.each(function (i) {
        $(this).val($(this).val().trim());
    })

    if (search.val().length >= 1) {
        form.submit();
    } else {
        form.trigger('reset')
    }
})

jQuery(document).on('submit', 'form.searchbar__input', function () {
    const form = $(this);
    const search = form.find('input');
    search.each(function (i) {
        $(this).val($(this).val().trim());
    })
})

jQuery(document).ready(function () {
    $('select').each(function () {

        if ($(this).hasClass('no-select2')) {
            return false;
        }

        options = {
            minimumResultsForSearch: 15,
        }

        if ($(this).parents('.input-group').length) {
            options.dropdownParent = $(this).parents('.input-group');
        }

        if ($(this).attr('search') === undefined) {
            options.minimumResultsForSearch = 999;
        }

        if ($(this).attr('validation') === undefined) {
            options.allowClear = true;
        }

        $(this).select2(options);

        if ($(this).attr('value')) {
            $(this).val($(this).attr('value')).trigger('change')
        }
    });
});

jQuery(document).on('change', 'select[name="doxygen-version"]', function () {
    $version = $(this).val();
    $target = '/documentation/d/' + $version + '/index.html';
    document.location.assign($target);
})

jQuery(document).on('change', 'select#version', function () {
    $version = $(this).val();
    $current = $('body').attr('version');
    $url = $('body').attr('spaceurl');
    $target = '/documentation/c' + $url.replace($current, $version);
    document.location.assign($target);
});

jQuery(document).on('click', 'span.visibility', function () {
    $pass = $(this).siblings('input.input_password');

    if ($(this).hasClass('visibility_visible')) {
        $pass.attr('type', 'password');
        $(this).removeClass('visibility_visible');
    } else {
        $pass.attr('type', 'text');
        $(this).addClass('visibility_visible');
    }

})

/**
 * Quantity Input
 */

function incrementValue(e) {
    e.preventDefault();
    var fieldName = $(e.target).data('field');
    var parent = $(e.target).closest('div');
    var currentVal = parseInt(parent.find('input[name=' + fieldName + ']').val(), 10);

    if (!isNaN(currentVal)) {
        parent.find('input[name=' + fieldName + ']').val(currentVal + 1).trigger('change');
    } else {
        parent.find('input[name=' + fieldName + ']').val(0).trigger('change');
    }
}

function decrementValue(e) {
    e.preventDefault();
    var fieldName = $(e.target).data('field');
    var parent = $(e.target).closest('div');
    var currentVal = parseInt(parent.find('input[name=' + fieldName + ']').val(), 10);

    if (!isNaN(currentVal) && currentVal > 0) {
        parent.find('input[name=' + fieldName + ']').val(currentVal - 1).trigger('change');
    } else {
        parent.find('input[name=' + fieldName + ']').val(0).trigger('change');
    }
}

$('.quantity-field').on('click', '.button-plus', function (e) {
    incrementValue(e);
});

$('.quantity-field').on('click', '.button-minus', function (e) {
    decrementValue(e);
});

/**
 * Dictionaries
 */

const sizeLabels = ['XXS', 'XS', 'S', 'M', 'L', 'XL', 'XXL', '3XL'];
const heightKeys = ['C', 'D', 'E', 'F', 'G', 'H', 'J'];
const sizeKeys = {
    'R': 'XS',
    'S': 'S',
    'M': 'M',
    'L': 'L',
    'N': 'XL',
    'P': 'XXL',
    'Q': 'XXXL',
    'T': 'XXXXL',
    'U': '5XL',
}

const heightRanges = {
    'M': {
        'D': [159, 166],
        'E': [167, 172],
        'F': [173, 178],
        'G': [179, 184],
        'H': [185, 190],
        'J': [191, 198]
    },
    'F': {
        'C': [153, 160],
        'D': [161, 166],
        'E': [167, 172],
        'F': [173, 180],
    }
}

/**
 * Functions
 */

function isMale(sexKey) {
    return sexKey == 'M';
}

function isFemale(sexKey) {
    return sexKey == 'F';
}

function calculateHeightKey(sexKey, part, height) {
    let val = parseInt(height);
    let key = undefined;

    // Male Height Keys
    if (isMale(sexKey)) {
        if (val >= 159 && val <= 166) {
            key = 'D';
        } else if (val >= 167 && val <= 172) {
            key = 'E';
        } else if (val >= 173 && val <= 178) {
            key = 'F';
        } else if (val >= 179 && val <= 184) {
            key = 'G';
        } else if (val >= 185 && val <= 190) {
            key = 'H';
        } else if (val >= 191 && val <= 198) {
            key = 'J';
        }
    }

    // Female Height Keys
    if (isFemale(sexKey)) {
        switch (part) {
            case 'top':
            case 'bottom':
                if (val >= 153 && val <= 160) {
                    key = 'C';
                } else if (val >= 161 && val <= 166) {
                    key = 'D';
                } else if (val >= 167 && val <= 172) {
                    key = 'E';
                } else if (val >= 173 && val <= 180) {
                    key = 'F';
                }
                break;

            // case 'bottom':
            //     if (val >= 153 && val <= 160) {
            //         key = 'C';
            //     } else if (val >= 161 && val <= 166) {
            //         key = 'D';
            //     } else if (val >= 167 && val <= 172) {
            //         key = 'E';
            //     } else if (val >= 173 && val <= 178) {
            //         key = 'F';
            //     }
            //     break;

            default:
                break;
        }

    }

    return key;
}

function calculateChestKey(chest) {
    let val = parseInt(chest);
    let key = undefined;

    if (val >= 83 && val <= 89) {
        key = 'XS';
    } else if (val >= 90 && val <= 95) {
        key = 'S';
    } else if (val >= 96 && val <= 101) {
        key = 'M';
    } else if (val >= 102 && val <= 107) {
        key = 'L';
    } else if (val >= 108 && val <= 112) {
        key = 'XL';
    } else if (val >= 113 && val <= 119) {
        key = 'XXL';
    }

    return key;
}

function calculateBustKey(bust) {
    let val = parseInt(bust);
    let key = undefined;

    if (val >= 81 && val <= 86) {
        key = 'XS';
    } else if (val >= 87 && val <= 91) {
        key = 'S';
    } else if (val >= 92 && val <= 96) {
        key = 'M';
    } else if (val >= 97 && val <= 101) {
        key = 'L';
    } else if (val >= 102 && val <= 106) {
        key = 'XL';
    } else if (val >= 107 && val <= 112) {
        key = 'XXL';
    }

    return key;
}

function calculateWaistKey(sexKey, part, waist) {
    let val = parseInt(waist);
    let key = undefined;

    // Male Waist Keys
    if (isMale(sexKey)) {
        switch (part) {
            case 'top':
                if (val >= 71 && val <= 77) {
                    key = 'XS';
                } else if (val >= 78 && val <= 83) {
                    key = 'S';
                } else if (val >= 84 && val <= 89) {
                    key = 'M';
                } else if (val >= 90 && val <= 95) {
                    key = 'L';
                } else if (val >= 96 && val <= 101) {
                    key = 'XL';
                } else if (val >= 102 && val <= 108) {
                    key = 'XXL';
                }
                break;

            case 'bottom':
                if (val >= 73 && val <= 79) {
                    key = 'XS';
                } else if (val >= 80 && val <= 84) {
                    key = 'S';
                } else if (val >= 85 && val <= 89) {
                    key = 'M';
                } else if (val >= 90 && val <= 94) {
                    key = 'L';
                } else if (val >= 95 && val <= 99) {
                    key = 'XL';
                } else if (val >= 100 && val <= 106) {
                    key = 'XXL';
                }
                break;

            default:
                break;
        }
    }

    // Female Waist Keys
    if (isFemale(sexKey)) {
        switch (part) {
            case 'top':
            case 'bottom':
                if (val >= 62 && val <= 67) {
                    key = 'XS';
                } else if (val >= 68 && val <= 72) {
                    key = 'S';
                } else if (val >= 73 && val <= 77) {
                    key = 'M';
                } else if (val >= 78 && val <= 82) {
                    key = 'L';
                } else if (val >= 83 && val <= 87) {
                    key = 'XL';
                } else if (val >= 88 && val <= 93) {
                    key = 'XXL';
                }
                break;

            default:
                break;
        }
    }


    return key;
}

function calculateHipsKey(sexKey, hips) {
    let val = parseInt(hips);
    let key = undefined;

    // Male Hips Keys
    if (isMale(sexKey)) {
        if (val >= 89 && val <= 94) {
            key = 'XS';
        } else if (val >= 95 && val <= 99) {
            key = 'S';
        } else if (val >= 100 && val <= 103) {
            key = 'M';
        } else if (val >= 104 && val <= 108) {
            key = 'L';
        } else if (val >= 109 && val <= 112) {
            key = 'XL';
        } else if (val >= 113 && val <= 117) {
            key = 'XXL';
        }
    }

    // Female Hips Keys
    if (isFemale(sexKey)) {
        if (val >= 89 && val <= 94) {
            key = 'XS';
        } else if (val >= 95 && val <= 99) {
            key = 'S';
        } else if (val >= 100 && val <= 104) {
            key = 'M';
        } else if (val >= 105 && val <= 109) {
            key = 'L';
        } else if (val >= 110 && val <= 114) {
            key = 'XL';
        } else if (val >= 115 && val <= 120) {
            key = 'XXL';
        }
    }

    return key;
}

function calculateWaistToFloorKey(sexKey, waistToFloor) {
    let val = parseInt(waistToFloor);
    let key = undefined;

    // Male Waits To Floor Keys
    if (isMale(sexKey)) {
        if (val >= 100 && val <= 105) {
            key = 'D';
        } else if (val >= 106 && val <= 109) {
            key = 'E';
        } else if (val >= 110 && val <= 113) {
            key = 'F';
        } else if (val >= 114 && val <= 117) {
            key = 'G';
        } else if (val >= 118 && val <= 121) {
            key = 'H';
        } else if (val >= 122 && val <= 127) {
            key = 'J';
        }
    }

    // Female Waits To Floor Keys
    if (isFemale(sexKey)) {
        if (val >= 97 && val <= 103) {
            key = 'C';
        } else if (val >= 104 && val <= 107) {
            key = 'D';
        } else if (val >= 108 && val <= 111) {
            key = 'E';
        } else if (val >= 112 && val <= 116) {
            key = 'F';
        }
    }

    return key;
}

// Defining Range of Sizes for Height (top)
function isSizeInTopHeightRange(sexKey, heightKey, subjects) {
    let range = [];

    if (isMale(sexKey)) {
        switch (heightKey) {
            case 'D':
                range = ['XS'];
                break;
            case 'E':
                range = ['XS', 'S'];
                break;
            case 'F':
                range = ['XS', 'S', 'M', 'L', 'XL', 'XXL'];
                break;
            case 'G':
                range = ['S', 'M', 'L', 'XL', 'XXL'];
                break;
            case 'H':
                range = ['M', 'L', 'XL', 'XXL'];
                break;
            case 'J':
                range = ['M', 'L', 'XL', 'XXL'];
                break;
            default:
                break;
        }
    }

    if (isFemale(sexKey)) {
        switch (heightKey) {
            case 'C':
                range = ['XS', 'S', 'M', 'L', 'XL'];
                break;
            case 'D':
            case 'E':
            case 'F':
                range = ['XS', 'S', 'M', 'L', 'XL', 'XXL'];
                break;
            default:
                break;
        }
    }

    if (
        subjects.every((element) => range.includes(element))
    ) {
        return {
            'success': true,
            'range': range
        }
    }

    return {
        'success': false
    };
}

// Defining Range of Sizes for Height (bottom)
function isSizeInBottomHeightRange(sexKey, heightKey, subjects) {
    let range = [];

    if (isMale(sexKey)) {
        switch (heightKey) {
            case 'D':
                range = ['XS'];
                break;
            case 'E':
                range = ['XS', 'S'];
                break;
            case 'F':
                range = ['XS', 'S', 'M', 'L', 'XL', 'XXL'];
                break;
            case 'G':
                range = ['S', 'M', 'L', 'XL', 'XXL'];
                break;
            case 'H':
                range = ['S', 'M', 'L', 'XL', 'XXL'];
                break;
            case 'J':
                range = ['M', 'L', 'XL', 'XXL'];
                break;
            default:
                break;
        }
    }

    if (isFemale(sexKey)) {
        switch (heightKey) {
            case 'C':
            case 'D':
            case 'E':
            case 'F':
                range = ['XS', 'S', 'M', 'L', 'XL', 'XXL'];
                break;
            default:
                break;
        }
    }

    if (
        subjects.every((element) => range.includes(element))
    ) {
        return {
            'success': true,
            'range': range
        }
    }

    return {
        'success': false
    };
}

function isHeightToLeg(heightKey, waistToFloorKey) {
    const delta = Math.abs(heightKeys.indexOf(heightKey) - heightKeys.indexOf(waistToFloorKey));

    if (delta > 1) {
        return {
            'success': false
        }
    }

    return {
        'success': true
    }
}

// Defining delta between (chest and waist) / (bust and hips)
function calculateJacketSize(sexKey, top, bottom) {
    const delta = Math.abs(sizeLabels.indexOf(top) - sizeLabels.indexOf(bottom));
    let mainSize;

    if (isMale(sexKey)) {
        switch (delta) {
            case 0:
            case 1:
                mainSize = top;
                break;

            case 2:
                if (sizeLabels.indexOf(top) > sizeLabels.indexOf(bottom)) {
                    mainSize = sizeLabels[sizeLabels.indexOf(bottom) + 1];
                } else {
                    mainSize = sizeLabels[sizeLabels.indexOf(top) + 1];
                }
                break;

            default:
                mainSize = undefined;
                break;
        }
    }

    if (isFemale(sexKey)) {
        switch (delta) {
            case 0:
                mainSize = top;
                break;

            case 1:
                if (sizeLabels.indexOf(top) > sizeLabels.indexOf(bottom)) {
                    mainSize = top;
                } else {
                    mainSize = top;
                }
                break;

            case 2:
                if (sizeLabels.indexOf(top) > sizeLabels.indexOf(bottom)) {
                    mainSize = sizeLabels[sizeLabels.indexOf(bottom) + 1];
                } else {
                    mainSize = sizeLabels[sizeLabels.indexOf(top) + 1];
                }
                break;

            default:
                mainSize = undefined;
                break;
        }
    }

    return mainSize;
}

// Defining delta between height and leg length
function calculatePantsSize(sexKey, heightKey, bottom, waistBottom, waistToFloorKey) {
    let extraSize;

    if (isMale(sexKey)) {
        const delta = Math.abs(sizeLabels.indexOf(bottom) - sizeLabels.indexOf(waistBottom));

        switch (Math.abs(delta)) {
            case 0:
                extraSize = bottom;
                break;

            case 1:
                if (sizeLabels.indexOf(bottom) > sizeLabels.indexOf(waistBottom)) {
                    extraSize = bottom;
                } else {
                    extraSize = waistBottom;
                }
                break;

            case 2:
                if (sizeLabels.indexOf(bottom) > sizeLabels.indexOf(waistBottom)) {
                    extraSize = sizeLabels[sizeLabels.indexOf(waistBottom) + 1];
                } else {
                    extraSize = sizeLabels[sizeLabels.indexOf(bottom) + 1];
                }
                break;

            default:
                extraSize = undefined;
                break;
        }
    }

    if (isFemale(sexKey)) {
        const delta = Math.abs(sizeLabels.indexOf(bottom) - sizeLabels.indexOf(waistBottom));

        switch (Math.abs(delta)) {
            case 0:
                extraSize = bottom;
                break;

            case 1:
                extraSize = bottom;
                break;

            case 2:
                if (sizeLabels.indexOf(bottom) > sizeLabels.indexOf(waistBottom)) {
                    extraSize = sizeLabels[sizeLabels.indexOf(waistBottom) + 1];
                } else {
                    extraSize = undefined;
                }
                break;

            default:
                extraSize = undefined;
                break;
        }
    }

    return extraSize;
}

// Main calculations
function calculateSizesFromMeasurement(sexKey) {

    let measurementsFields, measurementsFieldsKeys;

    if (isMale(sexKey)) {
        measurementsFields = ['measurementsHeight', 'measurementsChest', 'measurementsWaist', 'measurementsHips', 'measurementsWaistToFloor'];
        measurementsFieldsKeys = ['measurementsHeightTopKey', 'measurementsHeightBottomKey', 'measurementsChestKey', 'measurementsWaistTopKey', 'measurementsWaistBottomKey', 'measurementsHipsKey', 'measurementsWaistToFloorKey']
    }

    if (isFemale(sexKey)) {
        measurementsFields = ['measurementsHeight', 'measurementsBust', 'measurementsWaist', 'measurementsHips', 'measurementsWaistToFloor'];
        measurementsFieldsKeys = ['measurementsHeightTopKey', 'measurementsHeightBottomKey', 'measurementsBustKey', 'measurementsWaistTopKey', 'measurementsWaistBottomKey', 'measurementsHipsKey', 'measurementsWaistToFloorKey']
    }

    const measurementIsUndefined = (field) => undefined == window.wizardMeasurements[field];

    if (measurementsFields.some(measurementIsUndefined)) {
        return { log: 'Fields are empty!', customSize: true };
    }

    // Height
    window.wizardMeasurements.measurementsHeightTopKey = calculateHeightKey(sexKey, 'top', window.wizardMeasurements.measurementsHeight);
    window.wizardMeasurements.measurementsHeightBottomKey = calculateHeightKey(sexKey, 'bottom', window.wizardMeasurements.measurementsHeight);

    if (isMale(sexKey)) {
        // Chest
        window.wizardMeasurements.measurementsChestKey = calculateChestKey(window.wizardMeasurements.measurementsChest);
    }

    if (isFemale(sexKey)) {
        // Bust
        window.wizardMeasurements.measurementsBustKey = calculateBustKey(window.wizardMeasurements.measurementsBust);
    }

    // Waist for Top
    window.wizardMeasurements.measurementsWaistTopKey = calculateWaistKey(sexKey, 'top', window.wizardMeasurements.measurementsWaist);
    // Waist for Bottom
    window.wizardMeasurements.measurementsWaistBottomKey = calculateWaistKey(sexKey, 'bottom', window.wizardMeasurements.measurementsWaist);
    // Hips
    window.wizardMeasurements.measurementsHipsKey = calculateHipsKey(sexKey, window.wizardMeasurements.measurementsHips);
    // Waist to floor
    window.wizardMeasurements.measurementsWaistToFloorKey = calculateWaistToFloorKey(sexKey, window.wizardMeasurements.measurementsWaistToFloor);

    // Set custom size if measuremnts are out of range
    if (measurementsFieldsKeys.some(measurementIsUndefined)) {
        return { log: 'Values are out of range!', customSize: true };
    }

    // Set custom size if delta between Height and Leg Height is too big
    let heightToLeg = isHeightToLeg(window.wizardMeasurements.measurementsHeightBottomKey, window.wizardMeasurements.measurementsWaistToFloorKey);
    if (!heightToLeg.success) {
        return { log: 'Delta between Height and Leg Height is too big!', customSize: true };
    }

    let sexParams;

    // Set custom size if (chest) / (bust) are out of Height range

    sexParams = [
        sexKey,
        window.wizardMeasurements.measurementsHeightTopKey
    ];

    if (isMale(sexKey)) sexParams.push([
        window.wizardMeasurements.measurementsChestKey,
        window.wizardMeasurements.measurementsWaistTopKey,
    ]);

    if (isFemale(sexKey)) sexParams.push([
        window.wizardMeasurements.measurementsBustKey,
        window.wizardMeasurements.measurementsWaistTopKey,
    ]);

    let resultsTop = isSizeInTopHeightRange(...sexParams);
    if (!resultsTop.success) {
        return { log: 'Jacket Sizes are out of height range!', customSize: true };
    }

    window.wizardMeasurements.measurementsSizeRangeTop = resultsTop.range;

    // Set custom size if (waist) / (hips) are out of Height range

    sexParams = [
        sexKey,
        window.wizardMeasurements.measurementsHeightTopKey
    ];

    if (isMale(sexKey)) sexParams.push([
        window.wizardMeasurements.measurementsWaistBottomKey
    ]);

    if (isFemale(sexKey)) sexParams.push([
        window.wizardMeasurements.measurementsHipsKey
    ]);

    let resultsBottom = isSizeInBottomHeightRange(...sexParams);
    if (!resultsBottom.success) {
        return { log: 'Trousers Sizes are out of height range!', customSize: true };
    }

    window.wizardMeasurements.measurementsSizeRangeBottom = resultsBottom.range;

    // Set custom size if Delta between Top and Bottom is too big

    if (isMale(sexKey)) sexParams = [
        sexKey,
        window.wizardMeasurements.measurementsChestKey,
        window.wizardMeasurements.measurementsWaistTopKey
    ];

    if (isFemale(sexKey)) sexParams = [
        sexKey,
        window.wizardMeasurements.measurementsBustKey,
        window.wizardMeasurements.measurementsHipsKey
    ];

    const mainSize = calculateJacketSize(...sexParams);

    if (mainSize == undefined) {
        return { log: 'Delta between Top and Bottom is too big!', customSize: true };
    } else {
        window.wizardMeasurements.mainSize = mainSize;
        window.wizardMeasurements.mainSizeKey = Object.keys(sizeKeys).find(key => sizeKeys[key] == mainSize);
        window.wizardMeasurements.mainHeight = window.wizardMeasurements.measurementsHeightTopKey;
        window.wizardMeasurements.mainHeightKey = window.wizardMeasurements.measurementsHeightTopKey;
    }

    // Set custom size if Delta between Height and Waist to Floor is too big

    if (isMale(sexKey)) sexParams = [
        sexKey,
        window.wizardMeasurements.measurementsHeightTopKey,
        window.wizardMeasurements.measurementsHipsKey,
        window.wizardMeasurements.measurementsWaistBottomKey,
        window.wizardMeasurements.measurementsWaistToFloorKey
    ];

    if (isFemale(sexKey)) sexParams = [
        sexKey,
        window.wizardMeasurements.measurementsHeightBottomKey,
        window.wizardMeasurements.measurementsHipsKey,
        window.wizardMeasurements.measurementsWaistBottomKey,
        window.wizardMeasurements.measurementsWaistToFloorKey
    ];

    const extraSize = calculatePantsSize(...sexParams);

    if (extraSize == undefined) {
        return { log: 'Delta between values is too big!', customSize: true };
    } else {
        window.wizardMeasurements.extraSize = extraSize;
        window.wizardMeasurements.extraSizeKey = Object.keys(sizeKeys).find(key => sizeKeys[key] == extraSize);
        window.wizardMeasurements.extraHeight = window.wizardMeasurements.measurementsWaistToFloorKey;
        window.wizardMeasurements.extraHeightKey = window.wizardMeasurements.measurementsWaistToFloorKey;
    }

    return { log: `Recommended size: ${window.wizardMeasurements.mainSizeKey}${window.wizardMeasurements.mainHeightKey}${window.wizardMeasurements.extraSizeKey}${window.wizardMeasurements.extraHeightKey}`, customSize: false };

}
/**
 * Modal Controls
 */

function modalOverlay(open) {
    if (open === true) {
        const overlay = document.querySelector('.modal-overlay');

        if (!overlay) {
            $('body').append('<div class="modal-overlay"></div>');
        }

        $('body').addClass('overflow-hidden');
        $('.modal-overlay').css('height', $(document).height());
    } else {
        $('.modal-overlay').remove();
        $('body').removeClass('overflow-hidden');

    }
}

function modalHeading(title, subtitle, clear = true) {
    $overlay = $('#modal');
    $modalContent = $overlay.find('.content');

    $overlay.find('.title').html(title);
    $overlay.find('.subtitle').html(subtitle);

    if (clear) {
        $modalContent.html('<div class="data-loader"></div>');
    }

}

jQuery(document).on('click', 'button[trigger="close"]', function () {

    $('body').removeClass('overflow-hidden modal-open--navigation');
    $('.overlay-panel__back').remove();
    $('.overlay-panel').removeClass('overlay-panel_active');

    $('.overlay-panel .sub-menu').removeClass('sub-menu_active');
    $('.overlay-panel > .menu > ul > li').removeClass('menu-item_hidden');
    $('.header__mobile').removeClass('cross').addClass('burger');

    setTimeout(() => {
        $(this).parents('.overlay-form').attr('active', false);
        modalOverlay(false);
    }, 50);

})

jQuery(document).on('click', 'button[trigger="back-to-nav"]', function () {
    $(this).parents('.overlay-form').attr('active', false);
    modalOverlay(false);
})


jQuery(document).on('click', '.modal-overlay', function () {
    $('.overlay-form').attr('active', false);
    modalOverlay(false);
})


/**
 * Order Form Modal
 */

function formSetValues(formId) {
    const form = document.getElementById(formId);

    let formValues = localStorage.getItem('formValues');

    if (!formValues) {
        return;
    }

    formValues = JSON.parse(formValues);

    for (const [key, value] of Object.entries(formValues)) {

        let input = form.querySelector('[name="' + key + '"]');

        if (!!input === false) { continue; }

        if (input.tagName == 'SELECT') {
            $select = $('#' + formId + ' select[name="' + key + '"]');
            $select.val(value).trigger('change');
        } else {
            input.value = value;
        }

    }


}

function generateOverlayForm(product = false, open = false) {
    $overlay = $('#modal');
    $current = $overlay.attr('current');
    $loader = $overlay.find('.data-loader');
    $modalContent = $overlay.find('.content');
    $modal = 'request-form';

    const versions = ['TESLASUIT Developer Kit', 'TESLAGLOVE Developer Kit'];

    $product = product;
    $subtitle = $product ? `<b>${$product}</b>` : '';

    switch ($product) {
        case versions[0]:
            $subtitle += '<b> for $12,999</b>';
            break;
        case versions[1]:
            $subtitle += '<b> for $14,999</b>';
            break;

        case 'TESLASUIT - XR - 4.7 / 4.8':
        case 'TESLASUIT - Medical - 4.8.1':
        case 'TESLASUIT - Medical Edition':
        case 'TESLASUIT - XR Edition':
            $subtitle += '<b> for $12,999</b>';
            break;

        case 'TESLASUIT - XR - 4.5':
        case 'TESLASUIT - Medical - 4.5':
            $subtitle += '<b> for $8,500</b>';
            break;

        default:
            break;
    }


    jQuery.ajax({
        method: "POST",
        url: ajaxURL,
        dataType: 'json',
        data: {
            action: 'modal_generate',
            modal: $modal,
        },
        beforeSend: function () {
            modalHeading('Order Form', $subtitle)
            $overlay.attr('active', open);
            modalOverlay(open);
        },
    })
        .done(function (response) {
            if (response == false) {
                $modalContent.html('<p class="p2">Please, visit <a class="link">Contact Us page</a> and fill in the form</p>');
            } else {
                $loader.remove();
                $modalContent.html(response);

                $form = $modalContent.find('form');

                if ($product) {

                    $form.prepend('<input type="hidden" name="product">');

                } else {

                    $form.prepend('<div class="input-group"><label class="input-group__label" for="product">Choose product</label><select name="product" validation="isSelected" data-placeholder="Select Product" autocomplete="off"></select><p class="input-group__helper" id="overlay-request-form-price"></p></div>')
                    $versionSelect = $modalContent.find('select[name="product"]');
                    versions.forEach(element => {
                        if (!$versionSelect.find("option[value='" + element + "']").length) {
                            let option = new Option(element, element, false, false);
                            $versionSelect.append(option);
                        }
                    });

                }

                // Selects Init
                $modalContent.find('select').each(function () {
                    $(this).select2({
                        dropdownParent: $(this).parents('.input-group'),
                        minimumResultsForSearch: 999
                    });
                });

                formSetValues('request-form-overlay');

                if ($product) {

                    $form.find('input[name="product"]').val($product);

                } else {

                    if (window.location.pathname == '/products/teslasuit-4/') {

                        $versionSelect.val(versions[0]).trigger('change');

                    } else if (window.location.pathname == '/products/teslaglove/') {

                        $versionSelect.val(versions[1]).trigger('change');

                    } else {
                        $versionSelect.trigger('change');
                    }

                }

                bindValidation();
            }
        })

        .fail(function () {
            $modalContent.html('<p class="p2">Please, visit our <a class="link">Contact Us page</a> and fill in the form</p>');
        })


    $('#modal').attr('current', $modal);
}

jQuery(document).on('click', '[trigger="request-form"]', function () {
    let product = $(this).attr('product');
    generateOverlayForm(product, true);
})

jQuery(document).on('change', 'form#request-form-overlay select[name="product"]', function () {
    if ($(this).val() == 'TESLASUIT Developer Kit') {
        $('#overlay-request-form-price').text('For $12,999');
    } else if ($(this).val() == 'TESLAGLOVE Developer Kit') {
        $('#overlay-request-form-price').text('For $14,999');
    }
})

/**
 * Demo Request Form Modal
 */

jQuery(document).on('click', '[trigger="demo-form"]', function () {
    $overlay = $('#modal');
    $current = $overlay.attr('current');
    $loader = $overlay.find('.data-loader');
    $modalContent = $overlay.find('.content');
    $modal = 'demo-form';

    if ($current != $modal) {
        jQuery.ajax({
            method: "POST",
            url: ajaxURL,
            dataType: 'json',
            data: {
                action: 'modal_generate',
                modal: $modal,
            },
            beforeSend: function () {
                modalHeading('Request a Demo', 'Discover the full potential of the TESLASUIT and get a first hand look at how it can take your project to the next level.');
                $overlay.attr('active', true);
                modalOverlay(true);
            },
        })
            .done(function (response) {
                if (response == false) {
                    $modalContent.html('<p class="p2">Please, visit our <a class="link">Contact Us page</a> and fill in the form</p>');
                } else {
                    $loader.remove();
                    $modalContent.html(response);

                    $modalContent.find('select').each(function (index) {
                        $(this).select2({
                            dropdownParent: $(this).parents('.input-group'),
                            minimumResultsForSearch: 15
                        });
                    });

                    bindValidation();
                    formSetValues('demo-form-overlay');
                }
            })

            .fail(function () {
                $modalContent.html('<p class="p2">Please, visit our <a class="link">Contact Us page</a> and fill in the form</p>');
            })

    } else {
        $overlay.attr('active', true);
        modalOverlay(true);
    }

    $('#modal').attr('current', $modal);

})

/**
 * Contact Form Modal
 */

jQuery(document).on('click', '[trigger="contact-form"]', function () {
    $overlay = $('#modal');
    $current = $overlay.attr('current');
    $loader = $overlay.find('.data-loader');
    $modalContent = $overlay.find('.content');
    $modal = 'contact-form';

    if ($current != $modal) {
        jQuery.ajax({
            method: "POST",
            url: ajaxURL,
            dataType: 'json',
            data: {
                action: 'modal_generate',
                modal: $modal,
            },
            beforeSend: function () {
                modalHeading('Contact form', '');
                $overlay.attr('active', true);
                modalOverlay(true);
            },
        })
            .done(function (response) {
                if (response == false) {
                    $modalContent.html('<p class="p2">Please, visit our <a class="link">Contact Us page</a> and fill in the form</p>');
                } else {
                    $loader.remove();
                    $modalContent.html(response);

                    $modalContent.find('select').each(function (index) {
                        $(this).select2({
                            dropdownParent: $(this).parents('.input-group'),
                            minimumResultsForSearch: 15
                        });
                    });

                    bindValidation();
                    formSetValues('contact-form-overlay');
                }
            })

            .fail(function () {
                $modalContent.html('<p class="p2">Please, visit our <a class="link">Contact Us page</a> and fill in the form</p>');
            })

    } else {
        $overlay.attr('active', true);
        modalOverlay(true);
    }

    $('#modal').attr('current', $modal);

})

/**
 * Academics Form Overlay Form Modal
 */

jQuery(document).on('click', '[trigger="academics-form"]', function () {
    $overlay = $('#modal');
    $current = $overlay.attr('current');
    $loader = $overlay.find('.data-loader');
    $modalContent = $overlay.find('.content');
    $modal = 'academics-form';

    if ($current != $modal) {
        jQuery.ajax({
            method: "POST",
            url: ajaxURL,
            dataType: 'json',
            data: {
                action: 'modal_generate',
                modal: $modal,
            },
            beforeSend: function () {
                modalHeading('Academic Program', '<span>Our Academic Program is designed explicitly for universities and educational institutions interested in adopting immersive technologies for research, education, and training.</span><span class="mt-12">Apply now and get up to 30% discount.</span>');
                $overlay.attr('active', true);
                modalOverlay(true);
            },
        })
            .done(function (response) {
                if (response == false) {
                    $modalContent.html('<p class="p2">Please, visit our <a class="link">Contact Us page</a> and fill in the form</p>');
                } else {
                    $loader.remove();
                    $modalContent.html(response);

                    $modalContent.find('select').each(function (index) {
                        $(this).select2({
                            dropdownParent: $(this).parents('.input-group'),
                            minimumResultsForSearch: 15
                        });
                    });

                    bindValidation();
                    formSetValues('academics-form-overlay');
                }
            })

            .fail(function () {
                $modalContent.html('<p class="p2">Please, visit our <a class="link">Contact Us page</a> and fill in the form</p>');
            })

    } else {
        $overlay.attr('active', true);
        modalOverlay(true);
    }

    $('#modal').attr('current', $modal);

})

/**
 * Custom Order Form Modal
 */

jQuery(document).on('click', '[trigger="custom-order-form"]', function () {
    $overlay = $('#modal');
    $current = $overlay.attr('current');
    $loader = $overlay.find('.data-loader');
    $modalContent = $overlay.find('.content');
    $modal = 'custom-order-form';

    if ($current != $modal) {
        jQuery.ajax({
            method: "POST",
            url: ajaxURL,
            dataType: 'json',
            data: {
                action: 'modal_generate',
                modal: $modal,
            },
            beforeSend: function () {
                modalHeading('Custom order', '<p class="color_black mb-8">We are open to custom orders. If you have a special request, complete the form below, and we\'ll get in touch shortly. </p><p class="color_black">Please note that custom orders may incur extra charges and take a bit longer to produce.</p>');
                $overlay.attr('active', true);
                modalOverlay(true);
            },
        })
            .done(function (response) {
                if (response == false) {
                    $modalContent.html('<p class="p2 mt-8">Please, visit our <a class="link">Contact Us page</a> and fill in the form</p>');
                } else {
                    $loader.remove();
                    $modalContent.html(response);

                    $modalContent.find('select').each(function (index) {
                        $(this).select2({
                            dropdownParent: $(this).parents('.input-group'),
                            minimumResultsForSearch: 15
                        });
                    });

                    bindValidation();
                    formSetValues('custom-order-form-overlay');
                }
            })

            .fail(function () {
                $modalContent.html('<p class="p2">Please, visit our <a class="link">Contact Us page</a> and fill in the form</p>');
            })

    } else {
        $overlay.attr('active', true);
        modalOverlay(true);
    }

    $('#modal').attr('current', $modal);

})

/**
 * Measuremnts Videos Modal
 */

jQuery(document).on('click', '[trigger="modal-measurements-videos"]', function () {
    $overlay = $('#modal');
    $current = $overlay.attr('current');
    $loader = $overlay.find('.data-loader');
    $modalContent = $overlay.find('.content');
    $modal = 'modal-measurements-videos';
    $video = $(this).attr('measurements-video');
    $sex = $(this).attr('measurements-sex');

    jQuery.ajax({
        method: "POST",
        url: ajaxURL,
        dataType: 'json',
        data: {
            action: 'modal_generate',
            modal: $modal,
            video: $video,
            sex: $sex,
        },
        beforeSend: function () {
            modalHeading('How to measure', '');
            $overlay.attr('active', true);
            modalOverlay(true);
        },
    })
        .done(function (response) {
            if (response == false) {
                $modalContent.html('<p class="p2 mt-8">Please, read our Measurements Guide</p>');
            } else {
                $loader.remove();
                $modalContent.html(response);
            }
        })

        .fail(function () {
            $modalContent.html('<p class="p2 mt-8">Please, read our Measurements Guide</p>');
        })


    $('#modal').attr('current', $modal);

})

/**
 * Add Promocode Form Modal
 */

jQuery(document).on('click', '[trigger="modal-add-promocode"]', function () {
    $overlay = $('#modal');
    $current = $overlay.attr('current');
    $loader = $overlay.find('.data-loader');
    $modalContent = $overlay.find('.content');
    $modal = 'modal-add-promocode';

    if ($current != $modal) {
        jQuery.ajax({
            method: "POST",
            url: ajaxURL,
            dataType: 'json',
            data: {
                action: 'modal_generate',
                modal: $modal,
            },
            beforeSend: function () {
                modalHeading('Add promo code', '');
                $overlay.attr('active', true);
                modalOverlay(true);
            },
        })
            .done(function (response) {
                if (response == false) {
                    $modalContent.html('<p class="p2">Something went wrong! Add your promocode to Notes field</p>');
                } else {
                    $loader.remove();
                    $modalContent.html(response);

                    $modalContent.find('select').each(function (index) {
                        $(this).select2({
                            dropdownParent: $(this).parents('.input-group'),
                            minimumResultsForSearch: 15
                        });
                    });

                    bindValidation();
                }
            })

            .fail(function () {
                $modalContent.html('<p class="p2">Something went wrong! Add your promocode to Notes field</p>');
            })

    } else {
        $overlay.attr('active', true);
        modalOverlay(true);
    }

    $('#modal').attr('current', $modal);

})

/**
 * Vacancy Form Modal
 */

jQuery(document).on('click', '[trigger="vacancy-form-overlay-wrapper"]', function () {
    $overlay = $('#modal');
    $current = $overlay.attr('current');
    $loader = $overlay.find('.data-loader');
    $content = $overlay.find('.content');
    $modal = $(this).attr('trigger');
    $job = $(this).attr('job');

    jQuery.ajax({
        method: "POST",
        url: ajaxURL,
        dataType: 'json',
        data: {
            action: 'modal_generate',
            modal: $modal,
            job: $job
        },
        beforeSend: function () {
            $overlay.find('.title').html('Application');
            $overlay.find('.subtitle').html('You are applying for <b>' + $job + '</b>');
            $content.html('<div class="data-loader"></div>');
            $overlay.attr('active', true);
            modalOverlay(true);
        },
    })
        .done(function (response) {
            if (response == false) {
                document.getElementById('vacancy-form').scrollIntoView({
                    behavior: 'smooth'
                });
            } else {
                $loader.remove();
                $content.html(response);

                $content.find('select').each(function (index) {
                    $(this).select2({
                        dropdownParent: $(this).parents('.input-group'),
                        minimumResultsForSearch: 15
                    });
                });

                bindValidation();
            }
        })

        .fail(function () {
            $overlay.attr('active', false);
            modalOverlay(false);

            document.getElementById('vacancy-form').scrollIntoView({
                behavior: 'smooth'
            });
        })


    $('#modal').attr('current', $modal);

})

/**
 * Add Product Form Modal
 */

jQuery(document).on('click', '[trigger="modal-add-product"]', function () {
    $overlay = $('#modal');
    $current = $overlay.attr('current');
    $loader = $overlay.find('.data-loader');
    $content = $overlay.find('.content');
    $modal = $(this).attr('trigger');

    if ($current != $modal) {
        jQuery.ajax({
            method: "POST",
            url: ajaxURL,
            dataType: 'json',
            data: {
                action: 'modal_generate',
                modal: $modal
            },
            beforeSend: function () {
                $overlay.find('.title').html('Add Product');
                $overlay.find('.subtitle').html('Enter the serial number of the suit or scan the QR-code in order to register the product');
                $content.html('<div class="data-loader"></div>');
                $overlay.attr('active', true);
                modalOverlay(true);
            },
        })
            .done(function (response) {
                if (response == false) {
                    window.location.replace('https://' + window.location.hostname + "/product-check/");
                } else {
                    $loader.remove();
                    $content.html(response);

                    $content.find('select').each(function (index) {
                        $(this).select2({
                            dropdownParent: $(this).parents('.input-group'),
                            minimumResultsForSearch: 15
                        });
                    });

                    bindValidation();
                }
            })

            .fail(function () {
                window.location.replace('https://' + window.location.hostname + "/product-check/");
            })

    } else {
        $overlay.attr('active', true);
        modalOverlay(true);
    }

    $('#modal').attr('current', $modal);

})

/**
 * Delete Product Form Modal
 */

jQuery(document).on('click', '[trigger="modal-delete-product"]', function () {
    $overlay = $('#modal');
    $btn = $(this);
    $content = $overlay.find('.content');

    $overlay.find('.title').html('Confirmation');
    $overlay.find('.subtitle').html(`Are you sure you want to remove the device (<b>MSN ${$btn.attr('msn')}</b>) from your device list?`);

    $content.html('');
    $content.append('<button action="delete_my_product" class="btn btn_lg btn_primary btn_block mt-40 w-100">Yes</button>');
    $content.append('<button trigger="close" class="btn btn_lg btn_outline btn_block mt-24 w-100">No</button>');
    $content.find('[action="delete_my_product"]').attr('msn', $btn.attr('msn'));

    $overlay.attr('active', true);
    modalOverlay(true);

    $('#modal').attr('current', $btn.attr('trigger'));
})

/**
 * Get Appointment Form Modal
 */

jQuery(document).on('click', '[trigger="modal-appointment-form"]', function () {
    $overlay = $('#modal');
    $btn = $(this);
    $content = $overlay.find('.content');

    $overlay.find('.title').html('Book a meeting');
    $overlay.find('.subtitle').html('');

    $content.html('');
    $content.append('<div id="calendly-widget" class="calendly-inline-widget" data-url="https://calendly.com/i-maroz/teslasuit-onboarding?hide_gdpr_banner=1&hide_landing_page_details=1"></div>')
    $content.append('<script type="text/javascript" src="https://assets.calendly.com/assets/external/widget.js"></script>');
    $content.append('<p class="mt-32"><a href="/onboarding/" class="link">More info about Onboarding</a><p>');

    $overlay.attr('active', true);
    modalOverlay(true);

    $('#modal').attr('current', $btn.attr('trigger'));
})

/**
 * Knowledge Modal
 */

jQuery(document).on('click', '[knowledge]', function () {
    $overlay = $('#modal');
    $btn = $(this);
    $content = $overlay.find('.content');
    $knowledge = $btn.attr('knowledge');

    switch ($knowledge) {
        case 'Biometrics':
            modalHeading('Biometrics', '')
            $content.html('');
            $content.append('<p class="p2 mb-24">Suits version 4.7 are equipped with a PPG sensor.</p>');
            $content.append('<div class="img-wrapper"><img src="/wp-content/themes/teslasuit-portal/assets/img/knowledge/knowledge-ppg.png"></div>');
            $content.append('<p class="p4">PPG sensor</p>');
            $content.append('<p class="p2 mt-24 mb-24">PPG system as a part of technology provides information about the user\'s cardiorespiratory system state. Using data, obtained from the PPG sensor, our technology calculates the user\'s BPM and spO2 ratio. Moreover, the system provides consecutive cardiocycles duration data that can be used for HRV analysis.</p>');
            break;

        case 'Medical Mapping':
            modalHeading('Medical Mapping', '')
            $content.html('');
            $content.append('<p class="p2 mb-24">The medical edition of the suit has a specially designed mapping for more complete back stimulation. Also, the location of the electrodes and mockups is due to the location of the fasteners on the medical edition of the suit.</p>');
            $content.append('<p class="a2 mb-16">Male</p>');
            $content.append('<div class="img-wrapper mb-24"><img src="/wp-content/themes/teslasuit-portal/assets/img/knowledge/knowledge-medical-mapping-male.jpg"></div>');
            $content.append('<p class="a2 mb-16">Female</p>');
            $content.append('<div class="img-wrapper pb-32"><img src="/wp-content/themes/teslasuit-portal/assets/img/knowledge/knowledge-medical-mapping-female.jpg"></div>');

            break;

        case 'Custom Size option':
            modalHeading('Custom Size option', '')
            $content.html('');
            $content.append('<p class="p3 color_black">Custom sizing is a good alternative for those who have no matches in our Size Finder or fall in-between sizes.</p>');
            $content.append('<p class="p3 color_black mt-12">Our Custom Size option is basic as we only consider a total of 5 measurements (bust/chest circumference, waist circumference, hips circumference, leg length, and height). That isn’t enough information to create a bespoke suit but it is enough for a good fit.</p>');
            $content.append('<p class="p3 color_black mt-12">We offer a Custom Size option at no additional charges.</p>');
            $content.append('<p class="p3 color_black mt-12">Custom size pieces may take a bit longer to produce. We’ll let you know the estimated lead time once the order is placed.</p>');
            $content.append('<p class="p3 color_black mt-12">If you have both standard and custom sizes in one order, we’ll contact you to check whether you want everything in one batch (once the custom is finished) or in two instalments.</p>');
            $content.append('<p class="p3 color_black mt-12">Custom size items are non-returnable and non-refundable. Please double-check the measurements provided. You will have to confirm them once again while placing the order.</p>');

            break;

        default:
            break;
    }

    $content.append(`<div class="pb-32-sm mt-auto w-100"><button trigger="close" class="btn btn_md btn_rounded btn_secondary overlay-form__btn mt-32">Close</button></div>`);
    $overlay.attr('active', true);
    modalOverlay(true);

    $('#modal').attr('current', 'knowledge');
})
const path = '/wp-content/themes/teslasuit-portal';
const assets = path + '/assets';

function getCookie(name) {
    let matches = document.cookie.match(new RegExp(
        "(?:^|; )" + name.replace(/([\.$?*|{}\(\)\[\]\\\/\+^])/g, '\\$1') + "=([^;]*)"
    ));
    return matches ? decodeURIComponent(matches[1]) : undefined;
}

function setCookie(name, value, options = {}) {

    options = {
        path: '/',
        ...options
    };

    if (options.expires instanceof Date) {
        options.expires = options.expires.toUTCString();
    }

    let updatedCookie = encodeURIComponent(name) + "=" + encodeURIComponent(value);

    for (let optionKey in options) {
        updatedCookie += "; " + optionKey;
        let optionValue = options[optionKey];
        if (optionValue !== true) {
            updatedCookie += "=" + optionValue;
        }
    }

    document.cookie = updatedCookie;
}

function deleteCookie(name) {
    setCookie(name, "", {
        'max-age': -1
    })
}

function getKeyByValue(object, value) {
    return Object.keys(object).find(key => object[key] === value);
}

/**
 * FAQ Accordeon
 */
jQuery(document).on('click', '.faq .faq__question', function () {

    if ($(this).parent().hasClass('faq_active')) {

        $(this).parent().removeClass('faq_active');
        $(this).find('svg').removeClass('rotated_180');

    } else {
        $(this).parent().siblings('.faq_active').find('svg').removeClass('rotated_180');
        $(this).parent().siblings('.faq_active').removeClass('faq_active');

        $(this).parent().addClass('faq_active');
        $(this).find('svg').addClass('rotated_180');

    };
})

/**
 * Software Images Tabs
 */

jQuery(document).on('click', '.image-tabs .centered-toggles span', function () {

    const imgName = $(this).attr('image');
    const caption = $(this).attr('caption');
    const tabs = $(this).parents('.image-tabs');

    tabs.find('.centered-toggles span').removeClass('toggle_active');
    $(this).addClass('toggle_active');

    tabs.find('img').attr('src', assets + '/img/' + imgName + '.png');
    tabs.find('p.caption').text(caption);

})

/**
 * API Download Section Tabs
 */

jQuery(document).on('click', '.api-download-cta .toggle', function () {

    const imgName = $(this).attr('image');
    const version = $(this).attr('version');
    const section = $(this).parents('.api-download-cta');

    section.find('.toggle_active').removeClass('toggle_active');
    $(this).addClass('toggle_active');

    section.find('img').attr('src', assets + '/img/' + imgName + '.png');
    section.find('p.p3 b').text(version);

})

/**
 * Table Of Contents Generator
 */

function generateToC() {
    $content = $('.single-post #content');

    $toc = $('.post').find('.toc > ul');

    $headings_h2 = $content.find('h2');

    if ($headings_h2.length > 0) {
        $headings_h2.each(function (index) {
            $(this).attr('id', 'anchor_' + (index + 1));

            $line = $toc.find('li:last-child').clone().removeClass('toc__item_active');
            $line.find('a').text($(this).text()).attr('href', '#anchor_' + (index + 1));

            $line.appendTo($toc);

        });

        $toc.find('.toc__item_active').remove();
        $toc.find('li:first-child').addClass('toc__item_active');

        if ("IntersectionObserver" in window) {

        }

    } else {
        $('.post #sidebar').remove();
    }
}

/**
 * Table Of Contents Observer
 */

function tocObserver() {
    var headings = [].slice.call(document.querySelector('.single-post #content').querySelectorAll("h2"));

    let observer = new IntersectionObserver((entries, observer) => {
        entries.forEach(function (entry) {
            if (entry.isIntersecting) {
                let menu = document.getElementById('table-of-contents');
                menu.querySelectorAll('li').forEach(element => {
                    element.classList.remove('toc__item_active');
                });

                let id = entry.target.id;
                let currentLink = menu.querySelector(`a[href="#${id}"]`).parentElement;
                currentLink.classList.add('toc__item_active');
            }
        });
    }, { rootMargin: "0px 0px -80% 0px" });

    headings.forEach(function (heading) {
        observer.observe(heading);
    });
}

/**
 * Table Of Contents
 */

jQuery(document).ready(() => {

    if ($('.single-post #content').length > 0) {
        generateToC();
    }

});

jQuery(document).on('click', '.toc__item', function (e) {
    e.preventDefault();
    let hash = $(this).find('a').attr('href');

    $("html").animate({
        scrollTop: $(hash).offset().top - (window.headerHeight + 20)
    }, 800);
})


/**
 * Single Document Menu
 */

jQuery(document).on('click', '.single-doc #sidebar .menu .page_item_has_children > img', function () {
    $(this).parent().toggleClass('page_item_has_children_open');
})

jQuery(document).ready(() => {
    $docMenu = $('.single-doc #sidebar .menu');
    if ($docMenu.length) {
        if ($docMenu.find('.page_item_has_children').length == 0) {
            $docMenu.find('a').addClass('pl-16 pr-16');
        } else {
            $docMenu.find('.page_item_has_children').append('<img src="' + path + '/assets/icons/chevron-down-doc.svg">');
            $docMenu.find('.current_page_ancestor').addClass('page_item_has_children_open');
            $docMenu.find('.current_page_item').parents('.page_item_has_children').addClass('page_item_has_children_open');
            $docMenu.find('.page_item_has_children.current_page_item').addClass('page_item_has_children_open');
        }

    }

})

/**
 * FAQ Feedback Buttons
 */

jQuery(document).on('click', '.faq__feedback .btn', function () {
    $(this).addClass('btn_active');
    $(this).siblings('.btn').addClass('btn_disabled')
    $(this).parent().siblings(':contains("Was this answer helpful?")').text('Thank your for your feedback!')
})

/**
 * Accordeons
 */

jQuery(document).on('click', '.accordeon .accordeon__header', function () {

    if ($(this).parent().hasClass('accordeon_active')) {

        $(this).parent().removeClass('accordeon_active');
        $(this).find('.accordeon__toggle svg').removeClass('rotated_180');

    } else if ($(this).parent().hasClass('accordeon_disabled')) {
        return;
    } else {
        $(this).parent().siblings('.accordeon_active').find('svg').removeClass('rotated_180');
        $(this).parent().siblings('.accordeon_active').removeClass('faq_active');

        $(this).parent().addClass('accordeon_active');
        $(this).find('.accordeon__toggle svg').addClass('rotated_180');

    };
})

jQuery(document).on('click', '.academics-banner__toggle', function () {

    if ($(this).parent().hasClass('academics-banner--active')) {

        $(this).parent().removeClass('academics-banner--active');
        $(this).find('svg').removeClass('rotated_180');

    } else if ($(this).parent().hasClass('academics-banner--disabled')) {
        return;
    } else {
        $(this).parent().siblings('academics-banner--active').find('.academics-banner__toggle > svg').removeClass('rotated_180');
        $(this).parent().siblings('academics-banner--active').removeClass('academics-banner--active');

        $(this).parent().addClass('academics-banner--active');
        $(this).find('svg').addClass('rotated_180');

    };
})

/**
 * Video Controls
 */

jQuery(document).on('click', '.video__controls > *', function () {
    $video = $(this).parents('.video-block').find('video');
    $action = $(this).attr('id');
    $control = $(this).attr('control');

    if ($control == 'track') {
        $video.trigger($action);
        $video.toggleClass('manually-paused');
        $(this).siblings('[control="track"]').toggleClass('d-none');
    }

    if ($control == 'sound') {
        if ($action == 'mute') {
            $video.prop('muted', true);
        } else {
            $video.prop('muted', false);
        }

        $(this).siblings('[control="sound"]').toggleClass('d-none');
    }

    $(this).toggleClass('d-none');


})

/**
 * Video Lazy Loading
 */

function lazyLoadVideos() {
    let videos = [].slice.call(document.querySelectorAll(".banner__video video"));

    let observer = new IntersectionObserver((entries, observer) => {
        entries.forEach(function (entry) {
            const video = entry.target;
            videoBlock = video.closest('.video-block')
            const pauseButton = videoBlock.querySelector('#pause')
            const playButton = videoBlock.querySelector('#play')

            if (!video.classList.contains('manually-paused')) {

                if (entry.isIntersecting) {
                    video.play();
                    playButton.classList.add('d-none');
                    pauseButton.classList.remove('d-none');
                } else {
                    video.pause();
                    playButton.classList.remove('d-none');
                    pauseButton.classList.add('d-none');
                }
            }
        });
    }, { rootMargin: "0px -32px 0px -32px" });

    videos.forEach(function (video) {
        observer.observe(video);
    });
}

/**
 * Images / Backgrounds Lazy Loading
 */

function webpIsSupported() {
    var elem = document.createElement('canvas');
    if (!!(elem.getContext && elem.getContext('2d'))) {
        return elem.toDataURL('image/webp').indexOf('data:image/webp') == 0;
    }
    return false;
}

function lazyLoadImages() {
    var lazyImages = [].slice.call(document.querySelectorAll("img.lazy"));

    var format = '.webp';
    if (!webpIsSupported) {
        format = '.png';
    }

    let observer = new IntersectionObserver((entries, observer) => {
        entries.forEach(function (entry) {
            if (entry.isIntersecting) {
                let lazyImg = entry.target;

                if (lazyImg.dataset.format == 'predefined') {
                    lazyImg.src = lazyImg.dataset.src;
                } else {
                    lazyImg.src = lazyImg.dataset.src + format;
                }

                lazyImg.classList.remove("lazy");
                observer.unobserve(lazyImg);
            }
        });
    }, { rootMargin: "100% 0px 100% 0px" });

    lazyImages.forEach(function (lazyImg) {
        observer.observe(lazyImg);
    });
}

function lazyLoadBackgrounds() {
    var lazyBackgrounds = [].slice.call(document.querySelectorAll(".lazy[background-image]"));

    var format = '.webp';
    if (!webpIsSupported) {
        format = '.png';
    }

    let observer = new IntersectionObserver((entries, observer) => {
        entries.forEach(function (entry) {
            if (entry.isIntersecting) {
                let lazyBg = entry.target;
                let img = lazyBg.getAttribute('background-image');

                if (lazyBg.dataset.format == 'predefined') {
                    if (lazyBg.classList.contains('card_use-case')) {
                        lazyBg.style.background = 'linear-gradient(180deg, rgba(0, 0, 0, 0) 0%, rgba(0, 0, 0, 1) 100%), url("' + img + '")';
                    } else {
                        lazyBg.style.backgroundImage = 'url("' + img + '")';
                    }
                } else {
                    lazyBg.style.backgroundImage = 'url("' + assets + '/img/' + img + format + '")';
                }
                lazyBg.classList.remove("lazy");
                observer.unobserve(lazyBg);
            }
        });
    }, { rootMargin: "100% 0px 100% 0px" });


    lazyBackgrounds.forEach(function (lazyBackground) {
        observer.observe(lazyBackground);
    });
}

/**
 * Profile Sticky Navigation Observer
 */

function profileInnerNavObserver() {
    let sections = [].slice.call(document.querySelectorAll(".profile-inner-page .content > div[id]"));
    let observer = new IntersectionObserver((entries, observer) => {
        entries.forEach(function (entry) {
            if (entry.isIntersecting) {
                let menu = document.querySelector('.profile-inner-page .sidebar__menu');
                menu.querySelectorAll('li').forEach(element => {
                    element.classList.remove('active');
                });

                let id = entry.target.id;
                let currentLink = menu.querySelector(`span[href="#${id}"]`).parentElement;
                currentLink.classList.add('active');
            }
        });
    }, { rootMargin: "0px 0px -85% 0px" });
    sections.forEach(function (section) {
        observer.observe(section);
    });
}

/**
 * Events Sticky Navigation Observer
 */

function eventsNavObserver() {
    let sections = [].slice.call(document.querySelectorAll("#events-loop .content .card_event"));
    let observer = new IntersectionObserver((entries, observer) => {
        entries.forEach(function (entry) {
            if (entry.isIntersecting) {
                let menu = document.querySelector('#events-loop .sidebar__menu');
                menu.querySelectorAll('li').forEach(element => {
                    element.classList.remove('active');
                });

                let id = entry.target.id;
                let currentLink = menu.querySelector(`a[href="#${id}"]`).parentElement;
                currentLink.classList.add('active');
            }
        });
    }, { rootMargin: "-50% 0px -50% 0px" });
    sections.forEach(function (section) {
        observer.observe(section);
    });
}

/**
 * Product Check Searchbar
 */

jQuery(document).on('click', '.searchbar__searchby button', function () {
    $(this).siblings().removeClass('btn_active');
    $(this).addClass('btn_active');
    $('form.searchbar__input').trigger('reset');
    $input = $('.searchbar__input input:first-child');
    $pn = $('.searchbar__input input[name="pn"]')
    $pn.remove();
    $serial = $(this).attr('searchby');

    switch ($serial) {
        case 'legacy':
            $input.attr('name', 'legacy').attr('placeholder', '215673.25176256');
            break;
        case 'psn':
            $input.attr('name', 'psn').attr('placeholder', '272734');
            $pn = $('<input type="text">').attr('name', 'pn').attr('placeholder', '241513513-1251-5312').attr('id', 'searchbar-second').val('');
            $input.after($pn);
            break;

        default:
            break;
    }
});

/**
 * Smooth Scroll
 */

function smoothScroll(id, block = 'end') {
    element = document.getElementById(id);
    element.scrollIntoView({
        behavior: 'smooth',
        block: block,
    });
    setTimeout(function () {
        element.scrollIntoView({
            behavior: 'smooth',
            block: block,
        });
    }, 700);
}

/**
 * Making all extrnal links blank
 */

function targetBlank() {
    var internal = location.host.replace("www.", "");
    internal = new RegExp(internal, "i");

    var a = document.getElementsByTagName('a');
    for (var i = 0; i < a.length; i++) {
        var href = a[i].host;
        if (!internal.test(href) && a[i].getAttribute('target') != '_self') {
            a[i].setAttribute('target', '_blank');
        }
    }
};

/**
 * Overlay Form Local Storage
 */

jQuery(document).on('change', '#request-form-overlay input, #request-form-overlay select, #request-form-overlay textarea, #demo-form-overlay input, #demo-form-overlay select, #demo-form-overlay textarea', function () {
    const value = $(this).val();
    const field = $(this).attr('name');

    let formValues = localStorage.getItem('formValues');

    formValues = formValues == undefined ? new Object : JSON.parse(formValues);
    formValues[field] = value;
    localStorage.setItem('formValues', JSON.stringify(formValues));

});


/**
 * Functions on DOMContentLoaded
 */

document.addEventListener("DOMContentLoaded", function () {

    /**
     * IntersectionObserver
     */

    if ("IntersectionObserver" in window) {
        lazyLoadImages();
        lazyLoadBackgrounds();
        lazyLoadVideos();

        if (!!document.getElementById('table-of-contents')) {
            tocObserver();
        }

        if (!!document.getElementById('profile-single-product-sidebar')) {
            profileInnerNavObserver();
        }

        if (!!document.getElementById('events-loop')) {
            eventsNavObserver();
        }
    }

    /**
     * Support Chat
     */

    const chatWidget = document.getElementById('Microsoft_Omnichannel_LCWidget_Chat_Iframe_Window');
    const chatWrapper = document.getElementById('chatWrapper');

    if (!!chatWidget && !!chatWrapper) {
        chatWrapper.appendChild(chatWidget);
    }

    /**
     * Cookies
     */

    const cookiesConsentToast = document.getElementById('cookies-consent');
    if (!!cookiesConsentToast) {
        const acceptButtons = cookiesConsentToast.querySelectorAll('[data-cookies="accept"]');
        acceptButtons.forEach(element => {
            element.addEventListener('click', () => {
                setCookie('cookiesConsent', true, { 'max-age': 60 * 60 * 24 * 365 });
                cookiesConsentToast.remove();
            }, false)
        });
    }
    /**
     * Other
     */

    // targetBlank();

    /**
     * Support Chat
     */
    const chatInitializer = document.getElementById('chatInitializer');

    if (!!chatInitializer) {
        const chatInitializerBtn = chatInitializer.querySelector('button');

        window.addEventListener("lcw:ready", () => {
            chatInitializerBtn.innerText = 'Start chat';
        })

        chatInitializer.addEventListener('click', () => {
            const customerEmail = document.getElementById('customerEmail');
            const customerFullname = document.getElementById('customerFullname');
            const customerFirstName = document.getElementById('customerFirstName');
            const customerLastName = document.getElementById('customerLastName');

            Microsoft.Omnichannel.LiveChatWidget.SDK.setContextProvider(function contextProvider() {
                return {
                    'Email': { 'value': customerEmail.textContent, 'isDisplayable': true },
                    'Name': { 'value': customerFirstName.textContent + ' ' + customerLastName.textContent, 'isDisplayable': true }
                };
            });

            Microsoft.Omnichannel.LiveChatWidget.SDK.startChat();
        });

        window.addEventListener("lcw:startChat", function handleWidgetMaximizeEvent() {
            chatInitializer.style.display = 'none';
        });

        window.addEventListener("lcw:onMaximize", function handleWidgetMaximizeEvent() {
            chatInitializer.style.display = 'none';
        });

        window.addEventListener("lcw:onMinimize", function handleWidgetMaximizeEvent() {
            chatInitializerBtn.innerText = 'Continue chat';
            chatInitializer.style.display = 'block';
        });

        window.addEventListener("lcw:onClose", function handleWidgetMaximizeEvent() {
            chatInitializerBtn.innerText = 'Start new chat';
            chatInitializer.style.display = 'block';
        });
    }

    window.localStorage.setItem('measurementSystem', 'metric');

});

/**
 * Functions on Load
 */

window.addEventListener('load', function () {
    const developerHeroSwiper = document.querySelector('.hero .swiper');

    if (!!developerHeroSwiper) {
        const swiper = new Swiper(developerHeroSwiper, {
            loop: true,
            pagination: {
                el: ".swiper-pagination",
                clickable: true,
                bulletClass: "swiper-pagination-bullet hero__bullet",
                currentClass: "swiper-pagination-bullet-active hero__bullet--current"
            },
            autoplay: {
                delay: 5000,
                pauseOnMouseEnter: true,
                disableOnInteraction: false
            },
        });
    }

    const shopGalleryMain = document.querySelector('.thumbnails-gallery__main');
    const shopGalleryThumbs = document.querySelector('.thumbnails-gallery__thumbs');

    if (!!shopGalleryMain) {
        const shopGalleryThumbsSwiper = new Swiper(shopGalleryThumbs, {
            slidesPerView: 6,
            freeMode: true,
            watchSlidesProgress: true,
            spaceBetween: 8
        });
        const shopGalleryMainSwiper = new Swiper(shopGalleryMain, {
            loop: true,
            lazy: true,
            thumbs: {
                swiper: shopGalleryThumbsSwiper,
            },
        });
    }
})

/**
 * Measure Page Videos Toggles
 */

jQuery(document).on('click', '.measure-page-instructions__item .tag', function () {

    $toggler = $(this);
    $video = $toggler.parents('.measure-page-instructions__item').find('.video-wrapper');

    const text = $toggler.hasClass('tag--active') ? 'show video' : 'hide video';

    $toggler.find('.text').text(text);
    $toggler.toggleClass('tag--active');
    $video.toggle();

})

/**
 * Measure Page Instructions Toggles
 */


jQuery(document).on('click', '.measure-page__toggles .toggle', function () {
    $toggler = $(this).parent();
    $toggler.find('.toggle--active').removeClass('toggle--active');
    $(this).addClass('toggle--active');

    const sectionId = $(this).attr('toggle');

    $('.measure-page-instructions').hide();
    $(`#${sectionId}`).show();
})
/**
 * Getting cart from storage
 */

function getCart() {
    let cart = getCookie('teslasuitCart');
    cart = cart == undefined ? new Object : JSON.parse(cart);

    let cartItems = localStorage.getItem('teslasuitCartItems');
    cartItems = cartItems == undefined ? new Object : JSON.parse(cartItems);

    return [cart, cartItems];
}

/**
 * Saving cart to storage
 */

function saveCart(cart, cartItems) {
    setCookie('teslasuitCart', JSON.stringify(cart));

    const cartItemsCheck = {};

    for (const [key, value] of Object.entries(cartItems)) {
        if (Object.keys(cart).includes(key)) {
            cartItemsCheck[key] = value;
        }
    }

    localStorage.setItem('teslasuitCartItems', JSON.stringify(cartItemsCheck));
}

/**
 * Clear cart
 */

function clearCart() {
    deleteCookie('teslasuitCart');
    localStorage.removeItem('teslasuitCartItems');

    document.querySelectorAll('.header-cart-counter').forEach(element => {
        element.innerText = 'Select suits';
        element.href = '/offers/TFZ4IIIXX-IIII-IB0XXX/';
        element.classList.add('btn_secondary');
        element.classList.remove('btn_primary');
    });

}

/**
 * Clear cart
 */

function removeFromCart(id) {
    let [cart, cartItems] = getCart();

    delete cart[id];
    delete cartItems[id];

    saveCart(cart, cartItems);
}

/**
 * Updating cart on script load
 */

window.addEventListener('beforeunload', () => {
    let [cart, cartItems] = getCart();

    for (const [key, value] of Object.entries(cart)) {
        if (parseInt(value) == 0) {
            delete cart[key];
            delete cartItems[key];
        }
    }

    saveCart(cart, cartItems);
})


/**
 * Recalculating and redrawing Subtotal & Total
 */

function recalculateTotals(discount = 0) {
    const cartSubtotalNode = document.getElementById('cart-subtotal');
    const cartTotalNode = document.getElementById('cart-total');
    const promocodeNode = document.getElementById('promocode-money-discount');

    const products = document.querySelectorAll('.cart-product');

    let cartSubtotal = 0;

    products.forEach(element => {
        let price = element.querySelector('.cart-product__price').textContent.replace('$', '').replace(/,/g, '');
        let quantity = element.querySelector('input[name="quantity"]').value;

        cartSubtotal += (parseFloat(price) * parseInt(quantity));
    });

    let moneyDiscount = cartSubtotal * parseInt(discount) / 100;
    let cartTotal = cartSubtotal - moneyDiscount;

    if (!!promocodeNode && discount > 0) {
        // promocodeNode.textContent = '-' + moneyDiscount.toLocaleString("en-US", { style: "currency", currency: "USD" });
    }

    if (!!cartSubtotalNode) {
        cartSubtotalNode.textContent = cartSubtotal.toLocaleString("en-US", { style: "currency", currency: "USD" });
    }

    if (!!cartTotalNode) {
        cartTotalNode.textContent = cartTotal.toLocaleString("en-US", { style: "currency", currency: "USD" });
    }


}

/**
 * Changing product quantity
 */

function changeCartQuantity(id, newQuantity) {
    let [cart, cartItems] = getCart();

    newQuantity = parseInt(newQuantity);
    newQuantity = newQuantity > 0 ? newQuantity : 0;

    cart[id] = newQuantity.toString();

    saveCart(cart, cartItems);

    let totalItems = 0;
    let totalText = 'Select suit';
    let totalLink = '/offers/TFZ4IIIXX-IIII-IB0XXX/';
    let totalClass = 'btn_secondary';
    totalItems = Object.values(cart).reduce((acc, val) => { return parseInt(acc) + parseInt(val) });

    if (totalItems == 1) {
        totalText = '1 suit';
        totalLink = '/cart/';
        totalClass = 'btn_primary';
    } else if (totalItems > 1) {
        totalText = totalItems + ' suits';
        totalLink = '/cart/';
        totalClass = 'btn_primary';
    }

    document.querySelectorAll('.header-cart-counter').forEach(element => {
        element.innerText = totalText;
        element.href = totalLink;
        element.classList.remove('btn_primary', 'btn_secondary');
        element.classList.add(totalClass);
    });

    if (Object.entries(cart).length === 0) {
        window.location.reload();
    }

    recalculateTotals();

}

/**
 * Adding to cart
 */

function addToCart(cartItem) {
    let [cart, cartItems] = getCart();

    console.log(cartItem.id);

    if (cartItem.id in cart) {
        changeCartQuantity(cartItem.id, parseInt(cart[cartItem.id]) + 1)
    } else {
        cart[cartItem.id] = 1;
        cartItems[cartItem.id] = cartItem;

        saveCart(cart, cartItems);
    }
}

/**
 * Generating SKU
 */

function generateSKUFromCartItem(object) {

    let sku = '';

    const pattern = ['rootProductName', 'productName', 'versionMajor', 'versionMinor', 'versionPatch', 'edition', 'packageType', '-', 'mainSize', 'mainHeight', 'extraSize', 'extraHeight', '-', 'sex', 'colorMaterial', 'customization'];

    pattern.forEach(element => {
        if (element == '-') {
            sku += element
        } else {
            if (element in object) {
                sku += object[element];
            } else {
                sku += 'I';
            }
        }
    });

    sku += 'XXX';
    return sku;
}

/**
 * Generating ID for Cart
 */

function generateIDFromCartItem(object) {
    if (object.customSize == true) {
        if (isMale(object.sex)) {
            return object.sku + '-' + object.measurementsHeight + '-' + object.measurementsChest + '-' + object.measurementsWaist + '-' + object.measurementsHips + '-' + object.measurementsWaistToFloor;
        }
        if (isFemale(object.sex)) {
            return object.sku + '-' + object.measurementsHeight + '-' + object.measurementsBust + '-' + object.measurementsWaist + '-' + object.measurementsHips + '-' + object.measurementsWaistToFloor;
        }
    }

    return object.sku;
}

/**
 * Add to Cart Button on Shop Offer Wizard
 */

jQuery(document).on('submit', '#shop-offer-wizard-form', function (event) {

    event.preventDefault();

    $form = $(this);
    const form = $form[0];

    const formData = new FormData(form);
    const wizardObject = getWizardObject();
    let cartItem = new Object;

    for (const [key, value] of formData) {
        cartItem[key] = value
    }

    for (const [key, value] of Object.entries(wizardObject)) {
        cartItem[key] = value
    }

    cartItem['mainSizeKey'] = cartItem['mainSize'];
    cartItem['extraSizeKey'] = cartItem['extraSize'];

    cartItem.sku = generateSKUFromCartItem(cartItem);
    cartItem.id = generateIDFromCartItem(cartItem);

    addToCart(cartItem);

    const { pathname } = window.location;
    let trimmedPathname = pathname;
    if (pathname.endsWith("/")) {
        trimmedPathname = pathname.slice(0, pathname.length - 1);
    }
    let referrer = trimmedPathname.slice(trimmedPathname.lastIndexOf("/") + 1);
    window.location.assign('https://' + window.location.hostname + "/cart/?referrer=" + referrer);

});

/**
 * Changing quantity in Cart
 */

jQuery(document).on('change', '.cart-product input[name="quantity"]', function () {

    $newQuantity = $(this).val();
    $id = $(this).attr('product');

    if ($newQuantity == 0) {
        $(this).parents('.cart-product').addClass('cart-product--deleted');
    } else {
        $(this).parents('.cart-product').removeClass('cart-product--deleted');
    }

    changeCartQuantity($id, $newQuantity);

});

jQuery(document).on('click', '.cart-product__undelete-button', function () {
    $id = $(this).attr('product');
    $('.cart-product input[name="quantity"][product="' + $id + '"]').val(1).trigger('change');
});

/**
 * Draw Cart
 */

const editions = {
    'M': 'Medical',
    'E': 'XR'
}

const sexes = {
    'M': 'male',
    'F': 'female'
}

jQuery(document).ready(function () {
    $lines_wrapper = $('.cart__products');
    const [cart, cartItems] = getCart();
    const addOneMoreButton = document.getElementById('cart-add-one-more-btn');

    if (!!$lines_wrapper[0]) {

        let subtotal, total = 0;

        for (const [id, item] of Object.entries(cartItems)) {
            $line = $lines_wrapper.find('.cart-product#' + id);

            // Title
            $line.find('.cart-product__title').text(`${item.title} - ${friendlyValues['edition'][item.edition]}`);

            // Description
            let desc = `${friendlyValues['sex'][item.sex]}, `;
            if (item.customSize == true) {
                desc += 'custom size (';
                desc += `height&nbsp;${item.measurementsHeight}&nbsp;cm, `;

                if (isMale(item.sex)) {
                    desc += `chest&nbsp;${item.measurementsChest}&nbsp;cm, `;
                }

                if (isFemale(item.sex)) {
                    desc += `bust&nbsp;${item.measurementsBust}&nbsp;cm, `;
                }

                desc += `waist&nbsp;${item.measurementsWaist}&nbsp;cm, `;
                desc += `hips&nbsp;${item.measurementsHips}&nbsp;cm, `;

                desc += `leg&nbsp;length&nbsp;${item.measurementsWaistToFloor}&nbsp;cm`;

                desc += ')';
            } else {
                desc += `height&nbsp;${item.mainHeight} (${heightRanges[item.sex][item.mainHeight][0]}-${heightRanges[item.sex][item.mainHeight][1]}&nbsp;cm), `;
                desc += `jacket&nbsp;${sizeKeys[item.mainSize]}, `;
                desc += `trousers&nbsp;${sizeKeys[item.extraSize]}`;
            }

            $line.find('.cart-product__desc').html(desc);

            // Price
            const price = parseFloat(item.price);
            $line.find('.cart-product__price').text(price.toLocaleString("en-US", {
                style: "currency", currency: "USD"
            }));

            subtotal += price;
        }

        $('#cart-data-loader').remove();
        $lines_wrapper.show();
        recalculateTotals();

    }

    if (!!addOneMoreButton) {
        const urlParams = new URLSearchParams(window.location.search);
        let addOneMoreLink = '';

        if (urlParams.has('referrer') && urlParams.get('referrer').length === 21) {
            addOneMoreLink = urlParams.get('referrer') + '/';
        } else {
            addOneMoreLink = Object.values(cartItems).at(-1).offerId + '/';
        }

        addOneMoreButton.href += addOneMoreLink;
    }

});


/**
 * Checkout Form
 */

const fieldsToCopy = ['FirstName', 'LastName', 'Phone', 'Email', 'Country', 'Street', 'City', 'State', 'Zip'];

jQuery(document).on('change', '#copyBilling-checkbox', function (event) {
    $form = $(this).parents('form');
    const isChecked = $(this).is(":checked");

    fieldsToCopy.forEach(element => {
        $shippingField = $form.find(`[name="shipping${element}"]`);
        if (isChecked) {
            let billingVal = $form.find(`[name="billing${element}"]`).val();
            if (!billingVal || billingVal == ' ') {
                billingVal = null;
            }
            console.log(`${element}: ${billingVal}`);
            $shippingField.val(billingVal);
            $shippingField[0].dispatchEvent(new Event('input'));
            $shippingField.trigger('change');
        }
    });
})

document.addEventListener('DOMContentLoaded', () => {
    const copyBillingCheckbox = document.getElementById('copyBilling-checkbox');

    if (!!copyBillingCheckbox) {
        fieldsToCopy.forEach(element => {

            $(`[name="shipping${element}"]`).on('change', function (e) {
                if (copyBillingCheckbox.checked === true && $(this).val() != $(`[name="billing${element}"]`).val()) {
                    copyBillingCheckbox.checked = false;
                }
            });

            $(`[name="billing${element}"]`).on('change', function (e) {
                if (copyBillingCheckbox.checked === true && $(this).val() != $(`[name="shipping${element}"]`).val()) {
                    copyBillingCheckbox.checked = false;
                }
            });

        });


    }

})


jQuery(document).on('change', '#checkout-form select[name="billingCountry"]', function (event) {
    const val = $(this).val();

    $form = $(this).parents('form');
    $inputVAT = $form.find('input[name="vat"]');

    const countries = [
        'Austria', 'Belgium', 'Bulgaria', 'Croatia', 'Cyprus', 'Czech Republic', 'Denmark',
        'Estonia', 'Finland', 'France', 'Germany', 'Greece', 'Hungary', 'Ireland', 'Italy',
        'Latvia', 'Lithuania', 'Luxembourg', 'Malta', 'Netherlands', 'Poland', 'Portugal',
        'Romania', 'Slovakia', 'Slovenia', 'Spain', 'Sweeden', 'United Kingdom'
    ];

    if (countries.includes(val)) {
        $inputVAT.prop('required', true);
        $inputVAT.parents('.input-group').show();
    } else {
        $inputVAT.prop('required', false);
        $inputVAT.parents('.input-group').hide();
    }
})

jQuery(document).on('submit', '#checkout-form', function (event) {

    event.preventDefault();

    $form = $(this);
    const form = $form[0];

    const formData = new FormData(form);

    // Local
    // const formId = 38670;

    // Test
    // const formId = 38876;

    // Prod
    const formId = 41906;

    let cartNote = customerCartNote = '';
    let [cart, cartItems] = getCart();
    const totalItems = Object.values(cart).reduce((acc, val) => acc + parseInt(val), 0)

    cartNote += `TOTAL: ${totalItems} pcs. \n`;
    cartNote += `Promo Code: `;
    if (formData.get('promocodeApplied') && formData.get('promocodeDiscount')) {

        cartNote += `${formData.get('promocodeApplied')} (-${formData.get('promocodeDiscount')}%) `;

        formData.set('promocodeDiscount', `${formData.get('promocodeDiscount')}.00`);

    } else {
        cartNote += `-`;
    }
    cartNote += `\n———————————\n`;


    for (const [key, value] of Object.entries(cart)) {

        const item = cartItems[key];

        // Cart for Dynamics

        cartNote += `${item.title} - ${friendlyValues['edition'][item.edition]}, ${friendlyValues['sex'][item.sex]}\n`;
        cartNote += `${value} pcs.\n`;

        if (item.customSize == false) {
            cartNote += `Jacket Size: ${sizeKeys[item.mainSize]}\n`;
            cartNote += `Jacket Height: ${item.mainHeight}\n`;
            cartNote += `Trousers Size: ${sizeKeys[item.extraSize]}\n`;
            cartNote += `Trousers Height: ${item.extraHeight}\n\n`;
        } else {
            cartNote += `Custom Size Required\n\n`;
        }

        cartNote += `Height: ${item.measurementsHeight} cm\n`;
        if (isMale(item.sex)) {
            cartNote += `Chest: ${item.measurementsChest} cm\n`;
        }
        if (isFemale(item.sex)) {
            cartNote += `Bust: ${item.measurementsBust} cm\n`;
        }
        cartNote += `Waist: ${item.measurementsWaist} cm\n`;
        cartNote += `Hips: ${item.measurementsHips} cm\n`;
        cartNote += `Leg length: ${item.measurementsWaistToFloor} cm\n\n`;

        cartNote += `SKU template: ${item.sku}\n`;

        cartNote += `———————————\n`;

        // Cart for Customer Email
        customerCartNote += `${item.title} - ${friendlyValues['edition'][item.edition]}, ${friendlyValues['sex'][item.sex]}\n`;
        customerCartNote += `Quantity: ${value} pcs.\n`;

        let desc = 'Size: ';
        if (item.customSize == true) {
            desc += 'custom size (';
            desc += `height ${item.measurementsHeight} cm, `;

            if (isMale(item.sex)) {
                desc += `chest ${item.measurementsChest} cm, `;
            }

            if (isFemale(item.sex)) {
                desc += `bust ${item.measurementsBust} cm, `;
            }

            desc += `waist ${item.measurementsWaist} cm, `;
            desc += `hips ${item.measurementsHips} cm, `;

            desc += `leg length ${item.measurementsWaistToFloor} cm`;

            desc += ')';
        } else {
            desc += `height ${item.mainHeight} (${heightRanges[item.sex][item.mainHeight][0]}-${heightRanges[item.sex][item.mainHeight][1]} cm), `;
            desc += `jacket ${sizeKeys[item.mainSize]}, `;
            desc += `trousers ${sizeKeys[item.extraSize]}`;
        }

        customerCartNote += `${desc}\n\n`;

    }

    formData.append('cart', cartNote);
    formData.append('customerCart', customerCartNote);

    checkCaptcha()
        .then(function (data) {
            jQuery.ajax({
                method: "POST",
                url: `/api/contact-form-7/v1/contact-forms/${formId}/feedback`,
                data: formData,
                dataType: 'json',
                processData: false,
                contentType: false,
                beforeSend: function () {

                    $heading = $('.page-heading');
                    $heading.removeClass('page-heading').addClass(['container_double-top', 'container_zero-bottom']);
                    $heading.find('.title').addClass('shop-heading').removeClass('h1').text('Request submitted successfully');

                    $cart = $('.checkout__cart');
                    $cart.find('.cart__edit-link').remove();
                    $cart.find('#add-promocode[trigger="modal-add-promocode"]').removeClass(['color_primary', 'link']).attr('trigger', 'false').text('No promo code was applied').remove();

                    $form.trigger('reset');
                    $form.find('select').val(null).trigger('change');

                    $form.html('');
                    $form.append('<p class="p18 color_black mb-8">We’ll follow up with a customized quote based on your responses within 1-2 business days. Watch your inbox.</p>');
                    $form.append('<p class="p18 color_black mb-8">If you don’t see a response, be sure to check your spam or bulk email folders.</p>');

                    // Contact
                    $form.append('<p class="p2 color_black w-600 mt-32 mb-16">Contact information </p>');

                    $form.append(`<p class="p18 mb-8">${formData.get('billingFirstName')} ${formData.get('billingLastName')}</p>`);
                    $form.append(`<p class="p18 mb-8">${formData.get('billingPhone')}</p>`);
                    $form.append(`<p class="p18 mb-8">${formData.get('billingEmail')}</p>`);

                    if (formData.has('notes') && formData.get('notes').length !== 0) {
                        $form.append(`<p class="p18 mb-8">${formData.get('notes')}`);
                    }

                    // Billing
                    $form.append('<p class="p2 color_black w-600 mt-32 mb-16">Bill to</p>');

                    let billingAddress = `${formData.get('billingCountry')}, ${formData.get('billingStreet')}, ${formData.get('billingCity')}, `;
                    if (formData.has('billingState') && formData.get('billingState').length !== 0) {
                        billingAddress += `${formData.get('billingState')}, `;
                    }
                    billingAddress += `${formData.get('billingZip')}`;

                    $form.append(`<p class="p18 mb-8">${formData.get('company')}</p>`);
                    $form.append(`<p class="p18 mb-8">${billingAddress}</p>`);

                    if (formData.has('vat') && formData.get('vat').length !== 0) {
                        $form.append(`<p class="p18 mb-8">VAT ID ${formData.get('vat')}</p>`);
                    }

                    // Shipping
                    $form.append('<p class="p2 color_black w-600 mt-32 mb-16">Ship to</p>');

                    let shippingAddress = `${formData.get('shippingCountry')}, ${formData.get('shippingStreet')}, ${formData.get('shippingCity')}, `;
                    if (formData.has('shippingState') && formData.get('shippingState').length !== 0) {
                        shippingAddress += `${formData.get('shippingState')}, `;
                    }
                    shippingAddress += `${formData.get('shippingZip')}`;

                    $form.append(`<p class="p18 mb-8">${shippingAddress}</p>`);
                    $form.append(`<p class="p18 mb-8">${formData.get('shippingFirstName')} ${formData.get('shippingLastName')}</p>`);
                    $form.append(`<p class="p18 mb-8">${formData.get('shippingPhone')}</p>`);
                    $form.append(`<p class="p18 mb-8">${formData.get('shippingEmail')}</p>`);

                    window.scrollTo({ top: 0, behavior: 'smooth' });
                    clearCart();

                },
            })
        })
        .catch(function (data) {
            $form.find('.form__submitbar').before('<p class="form__message form__message--danger">Please, reload page and try again</p>');
        })

});

/**
 * Calculating Promocodes
 */

jQuery(document).on('submit', '#add-promocode-form', function (event) {

    $btn = $('button[type="submit"][form="add-promocode-form"]');

    event.preventDefault();

    $form = $(this);
    $input = $(this).find('input');
    $modalContent = $form.parent();

    const formData = new FormData($form[0]);
    formData.append('action', 'check_promocode');

    jQuery.ajax({
        method: "POST",
        url: ajaxURL,
        dataType: 'json',
        data: formData,
        processData: false,
        contentType: false,
        beforeSend: function () {
            $btn.text('Checking...').addClass('btn_disabled');
            $input.css('pointer-events', 'none');
        },
    })
        .done(function (response) {
            if (response.success) {
                modalHeading('Promo code applied', `<span class="color_black">You’ll get a ${response.discount}% off on the entire order</span>`, false);
                $btn.text('Continue').css('pointer-events', 'all').attr('type', 'button').attr('trigger', 'close').addClass('btn_secondary mt-24').removeClass('btn_primary btn_disabled');
                $form.remove();
                $btn.siblings().remove();

                $('#add-promocode').removeClass('link color_primary').text(`Promo code: ${formData.get('promocode')} (-${response.discount}%)`).attr('trigger', false);

                recalculateTotals(response.discount);

                $('#checkout-form').find('input[name="promocodeApplied"]').val(formData.get('promocode'));
                $('#checkout-form').find('input[name="promocodeDiscount"]').val(response.discount);

            } else {
                $btn.text('Apply');
                // controlValidator($input[0], false);
                $input.css('pointer-events', 'all');
                $input[0].setCustomValidity('The promo code entered is not found or valid.');
                if (!document.querySelector('.add-promocode-form__error')) {
                    $btn.after('<p class="mt-16 p4 add-promocode-form__error">The promo code entered is not found or valid. Please make sure you\'ve entered it correctly.</p>')
                }
            }
        })

        .fail(function (response) {
            console.log(response);
        })
});

jQuery(document).on('focus', '#add-promocode-form input[name="promocode"]', function (event) {
    $input = $(this);
    $btn = $('button[type="submit"][form="add-promocode-form"]');

    // controlValidator($input[0], true, true);
    $input[0].setCustomValidity('');
    $btn.removeClass('btn_disabled');
    $('.add-promocode-form__error').remove();
    $input.css('pointer-events', 'all');
});

/**
 * Shop Wizard Validation
 */

// document.addEventListener("DOMContentLoaded", function () {
//     const wizardForm = document.getElementById('shop-offer-wizard-form');

//     if (!!wizardForm) {
//         const names = [];
//         wizardForm.querySelectorAll('input').forEach(input => {

//             if (names.includes(input.name)) {
//                 return;
//             }

//             names.push(input.name);

//             input.addEventListener('invalid', (event) => {
//                 $('.shop-offer-wizard__navigation li[wizard="' + event.target.name + '"]').addClass('invalid');
//                 selectWizardGroup(event.target.name);
//             })

//         });
//     }
// })
if (!('nextElementSibling' in document.documentElement)) {
    Object.defineProperty(Element.prototype, 'nextElementSibling', {
        get: function () {
            var e = this.nextSibling;
            while (e && 1 !== e.nodeType) {
                e = e.nextSibling;
            }
            return e;
        }
    });
}


function forceInputUppercase(event) {
    const start = event.target.selectionStart;
    const end = event.target.selectionEnd;
    event.target.value = event.target.value.toUpperCase();
    event.target.setSelectionRange(start, end);
}


const emailRegex = '^([a-zA-Z0-9_.+-])+\@(([a-zA-Z0-9-])+\.)+([a-zA-Z0-9]{2,4})+$';

function controlValidator(element, valid, hidden = false) {
    const validator = element.nextElementSibling;
    if (element.value) {
        validator.parentNode.classList.add('validator_active');
        validator.style.display = 'block';
    } else {
        validator.parentNode.classList.remove('validator_active');
        validator.style.display = 'none';
    }

    if (valid) {
        validator.classList.remove('validator_cross');
    } else {
        validator.classList.add('validator_cross');
    }

    if (hidden === true){
        validator.parentNode.classList.remove('validator_active');
        validator.style.display = 'none';
        validator.classList.remove('validator_cross');
    }
}

function controlConfirmator(element, message, valid) {
    if (valid == 'valid') {
        message.textContent = 'Password confirmation completed!';
        message.classList.remove('confirmation-message_invalid');
        if (!!element.nextElementSibling) {
            controlValidator(element, true);
        }
    } else if (valid == 'invalid') {
        message.textContent = 'Password confirmation doesn’t match password!';
        message.classList.add('confirmation-message_invalid');
        if (!!element.nextElementSibling) {
            controlValidator(element, false);
        }
    } else {
        message.textContent = '';
        if (!!element.nextElementSibling) {
            controlValidator(element, false);
        }
    }

}

function bindValidation() {

    document.querySelectorAll('[validation]').forEach(element => {

        element.required = true;
        const form = element.closest('form');

        switch (element.getAttribute('validation')) {

            case 'isEmail':

                element.setAttribute('pattern', emailRegex);

                element.addEventListener('input', () => {
                    element.setCustomValidity('');
                    element.checkValidity();
                    // controlValidator(element, element.validity.valid);
                });

                element.addEventListener('invalid', () => {
                    element.setCustomValidity('Please, enter correct email address');
                });

                break;

            case 'isPhone':

                element.addEventListener('input', () => {
                    element.setCustomValidity('');
                    element.checkValidity();
                });

                element.setAttribute('pattern', '^[0-9+#()\.\-]*$');
                element.setAttribute('minlength', '3');
                element.setAttribute('maxlength', '50');

                element.addEventListener('invalid', () => {
                    element.setCustomValidity('Please, enter correct phone number');
                });

                break;

            case 'min':

                element.addEventListener('input', () => {
                    element.setCustomValidity('');
                    element.checkValidity();
                });

                element.setAttribute('pattern', '.*[^ ].*');
                element.setAttribute('minlength', '1');
                element.setAttribute('maxlength', '1000');

                element.addEventListener('invalid', () => {
                    element.setCustomValidity('Please, fill in this field');
                });

                break;

            case 'legacySN':

                element.addEventListener('input', () => {
                    element.setCustomValidity('');
                    element.checkValidity();
                });

                element.setAttribute('pattern', '^[0-9\.]*$');
                element.setAttribute('minlength', '14');
                element.setAttribute('maxlength', '15');

                element.addEventListener('invalid', () => {
                    element.setCustomValidity('Please, check this field');
                });

                break;

            case 'isUppercase':

                element.addEventListener('input', (event) => {
                    element.setCustomValidity('');
                    element.checkValidity();
                });

                element.addEventListener('keyup', forceInputUppercase);

                element.addEventListener('invalid', () => {
                    element.setCustomValidity('Please, check this field');
                });

                break;

            case 'password':

                element.addEventListener('input', () => {
                    element.setCustomValidity('');
                    element.checkValidity();
                });

                element.setAttribute('minlength', '6');
                element.addEventListener('input', () => {
                    controlValidator(element, element.validity.valid);
                });

                element.addEventListener('invalid', () => {
                    element.setCustomValidity('Please, enter at least 8 symbols');
                });

                break;

            case 'isChecked':

                break;

        }
    })

    document.querySelectorAll('[confirmation]').forEach(element => {

        const confirmationMessage = document.createElement('p');
        confirmationMessage.classList.add('confirmation-message')

        element.closest('.input-group').append(confirmationMessage);

        const input = element;
        const inputToConfirm = document.querySelector('[name="' + element.getAttribute('confirmation') + '"]');

        [input, inputToConfirm].forEach(element => {
            element.addEventListener('input', () => {


                if (input.validity.valid && inputToConfirm.validity.valid && inputToConfirm.value == input.value) {

                    controlConfirmator(input, confirmationMessage, 'valid');

                } else if (input.validity.valid && inputToConfirm.validity.valid && inputToConfirm.value != input.value) {

                    controlConfirmator(input, confirmationMessage, 'invalid');

                } else {
                    controlConfirmator(input, confirmationMessage, 'hide');
                }
            });
        });


    })

}

document.addEventListener("DOMContentLoaded", () => {

    bindValidation();

});
const friendlyValues = {
    edition: {
        E: 'XR',
        M: 'Medical'
    },
    sex: {
        M: 'Male',
        F: 'Female'
    }
}

jQuery(document).ready(function () {
    $inputs = $('.wizard-group:not(.wizard-group--active)').find('input');

    $inputs.each(function () {
        $(this).attr('tabindex', '-1');
    })
})

/**
 * Getting wizard object from storage
 */

function getWizardObject() {
    let wizardObject = window.teslasuitWizardObject;
    wizardObject = wizardObject == undefined ? new Object : JSON.parse(wizardObject);

    return wizardObject;
}

/**
 * Saving wizard object to storage
 */

function setWizardObject(wizardObject) {
    window.teslasuitWizardObject = JSON.stringify(wizardObject)
}

/**
 * Adding pair to wizard object
 */

function addToWizardObject(key, value) {
    let wizardObject = getWizardObject();
    wizardObject[key] = value;
    setWizardObject(wizardObject);
}

/**
 * Disabling Wizard Form submit on Enter button
 */

jQuery(document).on('keyup keypress', '#shop-offer-wizard-form', function (event) {
    const keyCode = event.keyCode || event.which;
    if (keyCode === 13) {
        event.preventDefault();
        return false;
    }
})

/**
 * Check if Input is Radio
 */

function isInputRadio($input) {
    if ($input.attr('type') == 'radio') {
        return true;
    }
    return false;
}

/**
 * Get any type Input value
 */

function getInputValue($input) {
    if (isInputRadio($input)) {
        // if is radio
        return $input.parent().find(':checked').val();
    } else {
        // if is text / number / hidden
        return $input.val();
    }
}

/**
 * Check if Input is empty
 */

function isInputEmpty($input) {
    $value = getInputValue($input);
    if ($value == undefined || $value == '' || $value == null || $value.length == 0 || $value === false) {
        return true;
    }
    return false;
}

/**
 * Toggle Input visibility in Wizard
 */

function toggleWizardInput($input, active) {
    if (active == true) {
        $input.prop('disabled', false);
        $input.parents('.input-group').removeClass('d-none');
    } else {
        $input.prop('disabled', true);
        $input.parents('.input-group').addClass('d-none');
    }

}

/**
 * Set Vital Input Value
 */

function changeVitalValue(group, value = null) {
    $input = $(`[wizard-group="${group}"]`).find('.wizard-group__vital-input');
    $input.val(value).trigger('change');
}

/**
 * Validation of Wizard Group Vital Input
 */

function isWizardGroupMainInputEmpty($group) {
    const isEmpty = isInputEmpty($group.find('.wizard-group__vital-input'));
    return isEmpty;
}

/**
 * Shop Offer Wizard Navigation
 */

function selectWizardGroup(group) {
    $('.shop-offer-wizard__navigation li').removeClass('active');
    $(`.shop-offer-wizard__navigation li[wizard="${group}"]`).addClass('active');

    $newGroup = $(`.wizard-group[wizard-group="${group}"]`);
    $('.wizard-group').removeClass('wizard-group--active');
    $newGroup.addClass('wizard-group--active');

    $inputs = $newGroup.find('input:not(:disabled)');
    $inputs.each(function () {
        $(this).attr('tabindex', null);
    })

    window.scrollTo({ top: 0, behavior: 'smooth' });
}

jQuery(document).on('click', '#shop-offer-wizard [wizard]', function (event) {
    const nextGroup = $(this).attr('wizard');
    $nextGroup = $(`#shop-offer-wizard .wizard-group[wizard-group="${nextGroup}"]`);
    $currentGroup = $('#shop-offer-wizard .wizard-group--active');

    if (!isWizardGroupMainInputEmpty($nextGroup)) {
        selectWizardGroup(nextGroup);
        return;
    }

    if (isWizardGroupMainInputEmpty($currentGroup)) {
        alert('Choose an option!');
        return;
    }

    selectWizardGroup(nextGroup);
});

jQuery(document).on('click', '.wizard-group__title:not(".wizard-group__title--open-navigation")', function (event) {
    $(this).addClass('wizard-group__title--open-navigation');

    const nav = document.querySelector('.shop-offer-wizard__navigation');
    const mobileNav = nav.cloneNode(true);
    mobileNav.classList.add('shop-offer-wizard__navigation--mobile');
    $(this)[0].appendChild(mobileNav);

});

jQuery(document).on('click', '.wizard-group__description, input', function (event) {
    $mobileNav = $('.wizard-group__title--open-navigation');
    $mobileNav.removeClass('wizard-group__title--open-navigation');
    $mobileNav.find('.shop-offer-wizard__navigation').remove();
});

jQuery(document).on('click', '.wizard-group__title--open-navigation', function (event) {
    $(this).removeClass('wizard-group__title--open-navigation');
    $(this).find('.shop-offer-wizard__navigation').remove();
});

/**
 * Updating Wizard Object on Radio Input change
 */

jQuery(document).on('change', '#shop-offer-wizard input:not(:hidden)', function (event) {
    const key = $(this).attr('name');
    const value = getInputValue($(this));
    addToWizardObject(key, value);
});

/**
 * Updating Navaigation and clearing next groups Inputs on Vital Input change
 */

jQuery(document).on('change', '.wizard-group__vital-input', function (event) {
    const value = getInputValue($(this));
    const wizardName = $(this).attr('name')

    $group = $(this).parents('.wizard-group');
    $li = $(`.shop-offer-wizard__navigation li[wizard="${wizardName}"]`);

    // console.log($(this).attr('name') + ' group vital input changed to ' + $value);

    if (isWizardGroupMainInputEmpty($group)) {
        $group.find('.wizard-group__buttons button[wizard]:not(.btn_always-enabled)').addClass('btn_disabled');
        $group.find('.wizard-group__buttons #wizard-add-to-cart').addClass('btn_disabled');

        $li.removeClass('defined');
        $li.find('.selection').html('');
    } else {
        $group.find('.wizard-group__buttons button[wizard]').removeClass('btn_disabled');
        $group.find('.wizard-group__buttons #wizard-add-to-cart').removeClass('btn_disabled');

        $li.addClass('defined');

        if (value != 'true' && value.length != 0 && wizardName.length != 0) {
            $li.find('.selection').html(`:&nbsp;${friendlyValues[wizardName][value]}`);
        }
    }

    let names = [];

    $li.nextAll().each(function () {
        let nextWizardName = $(this).attr('wizard');
        names.push(nextWizardName);
    });

    names.forEach(element => {
        $inputs = $(`[wizard-group="${element}"] input`);
        $inputs.each(function () {
            $i = $(this);

            if (!isInputEmpty($i)) {
                if (isInputRadio($i)) {
                    $i.prop('checked', false);
                } else {
                    $i.val(null);
                }

                $i.trigger('change')
            }
        })
    });
});

/**
 * Measurements Group
 */

jQuery(document).on('click', '#shop-offer-wizard [wizard="measurements"]', function (event) {

    const wizardObject = getWizardObject();

    $inputs = $('#wizard-measurements').find('input');

    $inputs.each(function () {
        toggleWizardInput($(this), true);
    })

    changeMeasurementsVideoSrc(wizardObject.sex, 'height');
    $videoToggles = $('.measurements-video-toggle');
    $videoToggles.each(function () {
        $(this).attr('measurements-sex', wizardObject.sex);
        $(this).show();
    });

    switch (wizardObject.sex) {
        case 'F':
            ['measurementsChest'].forEach(element => {
                $input = $('#wizard-measurements').find(`input[name="${element}"]`);
                toggleWizardInput($input, false);
            });

            ['chest'].forEach(element => {
                $toggle = $(`.measurements-video-toggle[measurements-video="${element}"]`);
                $toggle.hide();
            });

            break;

        case 'M':
            ['measurementsBust'].forEach(element => {
                $input = $('#wizard-measurements').find(`input[name="${element}"]`);
                toggleWizardInput($input, false);
            });

            ['bust'].forEach(element => {
                $toggle = $(`.measurements-video-toggle[measurements-video="${element}"]`);
                $toggle.hide();
            });

            break;

        default:
            break;
    }

    let system = window.localStorage.getItem('measurementSystem');
    if (system === undefined) {
        system = 'metric';
        window.localStorage.setItem('measurementSystem', system);
    }

    $('#shop-offer-wizard').attr('measurementSystem', system);

    $groupSizes = $('[wizard-group="sizes"]');

    $groupSizes.find('.wizard-group__vital-input').val(null).trigger('change');
    $groupSizes.find('input[type="radio"]').prop('disabled', false);
    $groupSizes.find('.wizard-radio__label--disabled').removeClass('wizard-radio__label--disabled');
    $groupSizes.find('.wizard-radio__label--recommended').removeClass('wizard-radio__label--recommended');
    $groupSizes.find('.wizard-radio__label--recommended-parent').removeClass('wizard-radio__label--recommended-parent');

    $groupSizes.find('.to-be-deleted').remove();
    $groupSizes.find('*').show();

});


jQuery(document).on('change keyup', '#wizard-measurements input', function (event) {
    $inputs = $('#wizard-measurements').find('input:not(:disabled)');
    const inputResults = new Object;
    const wizardObject = getWizardObject();

    if ($(this).val().length > 3) {
        $(this).val($(this).val().slice(0, 3));
    }

    // Check for all fields validity

    $inputs.each(function () {
        $i = $(this);
        const name = $i.attr('name');
        const value = getInputValue($i);

        if (isInputEmpty($i)) {
            changeVitalValue('measurements', null)
            return false;
        } else {
            changeVitalValue('measurements', true);
            inputResults[name] = value;
        }
    })

    window.wizardMeasurements = Object.assign({}, inputResults);

    window.wizardMeasurements.customSize = true;
    const results = calculateSizesFromMeasurement(wizardObject.sex);

    window.wizardMeasurements.customSize = results.customSize;

    for (const [key, value] of Object.entries(window.wizardMeasurements)) {
        addToWizardObject(key, value);
    }

    console.log(results);

    // Populate Results on Sizes Group
    const resultsElement = document.getElementById('wizard-measurements-results');
    resultsElement.innerHTML = '';

    for (const [key, value] of Object.entries(inputResults)) {

        const node = document.createElement('div');
        node.classList.add('flex-column');

        const title = document.createElement('span');
        title.classList.add('p3', 'color_font');
        title.textContent = key.replace('measurements', '').replace(/([A-Z])/g, ' $1').trim();
        if (key == 'measurementsWaistToFloor') {
            title.textContent = 'Leg length';
        }

        node.appendChild(title);

        const val = document.createElement('span');
        val.classList.add('p3', 'color_black');
        val.textContent = value;

        val.textContent = val.textContent + ' cm';

        if (key == 'measurementsHeight') {
            if (window.wizardMeasurements.measurementsHeightTopKey != undefined) {
                val.textContent = val.textContent + ` (${window.wizardMeasurements.measurementsHeightTopKey})`
            }
        }


        node.appendChild(val);

        resultsElement.appendChild(node)
    }

});

/**
 * Sizes Group
 */

jQuery(document).on('click', '#shop-offer-wizard [wizard="sizes"]', function (event) {
    const wizardMeasurements = window.wizardMeasurements;

    $group = $('[wizard-group="sizes"]');

    if (
        undefined != wizardMeasurements &&
        undefined != wizardMeasurements.mainSize &&
        undefined != wizardMeasurements.mainHeightKey &&
        undefined != wizardMeasurements.extraSize &&
        undefined != wizardMeasurements.extraHeightKey &&

        false == wizardMeasurements.customSize
    ) {

        // Main Size
        $group.find(`input[name="mainSize"]`).each(function () {
            const key = $(this).attr('value');
            const value = sizeKeys[key];
            const id = $(this).attr('id');

            if (!wizardMeasurements.measurementsSizeRangeTop.includes(value)) {
                $(this).prop('disabled', true);
                $group.find(`label[for="${id}"] .wizard-radio__label`).addClass('wizard-radio__label--disabled');
                return;
            }

            if (wizardMeasurements.mainSizeKey == key) {
                $label = $(this).siblings(`label[for="${id}"]`);
                $label.addClass('wizard-radio__label--recommended-parent');
                $label.siblings(`label[for="${id}"]`).find('.wizard-radio__label').addClass('wizard-radio__label--recommended');
            }
        })

        // Extra Size
        $group.find(`input[name="extraSize"]`).each(function () {
            const key = $(this).attr('value');
            const value = sizeKeys[key];
            const id = $(this).attr('id');

            if (!wizardMeasurements.measurementsSizeRangeBottom.includes(value)) {
                $(this).prop('disabled', true);
                $group.find(`label[for="${id}"] .wizard-radio__label`).addClass('wizard-radio__label--disabled');
                return;
            }

            if (wizardMeasurements.extraSizeKey == key) {
                $label = $(this).siblings(`label[for="${id}"]`);
                $label.addClass('wizard-radio__label--recommended-parent');
                $label.siblings(`label[for="${id}"]`).find('.wizard-radio__label').addClass('wizard-radio__label--recommended');
            }
        })

    } else {

        // Custom Size
        changeVitalValue('sizes', true);
        $group.find('input[type="radio"]').prop('disabled', true);
        $group.find('.wizard-group__options > *').hide();
        $group.find('.wizard-group__sidebar > *').hide();
        $group.find('.wizard-group__buttons').show();

        $inputResults = $('#wizard-measurements-results').clone();
        $inputResults.removeAttr('id').addClass('to-be-deleted');

        $group.find('.wizard-group__options')
            .prepend($inputResults)
            .prepend('<p class="p3 to-be-deleted color_black w-700">Measurements provided</p>')
            .prepend('<p class="p3 to-be-deleted color_black mb-16 mt-12">Please be sure to double check your measurements below before submitting the request. You can adjust the measurements by returning to the previous page. We will get back to you if any additional measurements are needed.</p>')
            .prepend('<p class="p3 to-be-deleted color_black">It seems you have no matches in our Size Finder or fall in-between sizes. As an alternative to standard sizes, we offer a <span class="knowledge--text" knowledge="Custom Size option">Custom&nbsp;Size&nbsp;option</span> at no additional charges.</p>')
            .prepend('<h4 class="wizard-group__title to-be-deleted">Custom Size</h4>')
    }

});

jQuery(document).on('change', '#shop-offer-wizard [wizard-group="sizes"] input[type="radio"]', function (event) {
    const inputs = document.querySelectorAll('#shop-offer-wizard [wizard-group="sizes"] input[type="radio"]');
    const names = [];
    inputs.forEach(element => {
        if (!names.includes(element.name)) {
            names.push(element.name);
        }
    });

    // Check for all fields validity

    $.each(names, function (index, value) {
        $radio = $('input[type="radio"][name="' + value + '"]:checked');

        if (isInputEmpty($radio)) {
            changeVitalValue('sizes', null);
            return false;
        } else {
            changeVitalValue('sizes', true);
        }
    })

});

/**
 * Change metric system
 */

jQuery(document).on('click', '.switch-metric-system', function (event) {
    const system = $(this).attr('system');
    window.localStorage.setItem('measurementSystem', system);

    $('#shop-offer-wizard').attr('measurementSystem', system);
    $('.switch-metric-system.active').removeClass('active')
    $(this).addClass('active')
});

/**
 * Video Toggles
 */

jQuery(document).on('click', '.inline-toggles__toggle', function (event) {
    $(this).siblings().removeClass('inline-toggles--active');
    $(this).addClass('inline-toggles--active');

    const id = $(this).parents('.inline-toggles').attr('toggle-id');
    $node = $(`${id}`);

    if (id == 'video-measurements') {
        const sex = $(this).attr('measurements-sex');
        const type = $(this).attr('measurements-video');

        changeMeasurementsVideoSrc(sex, type);
    }

});

function changeMeasurementsVideoSrc(sex, type) {
    const src = `/wp-content/uploads/measurements-${sex}-${type}-1-1.mp4`;
    const video = document.getElementById('video-measurements');
    video.src = src;
    video.load();
}